// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/RealTimeData.proto

package com.navinfo.stream.qingqi.protocol.java;

public final class RealTimeDataPb {
  private RealTimeDataPb() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RealTimeDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int64 gpsTime = 1;
    /**
     * <code>required int64 gpsTime = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    boolean hasGpsTime();
    /**
     * <code>required int64 gpsTime = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    long getGpsTime();

    // optional int32 latitude = 2;
    /**
     * <code>optional int32 latitude = 2;</code>
     *
     * <pre>
     *纬度
     * </pre>
     */
    boolean hasLatitude();
    /**
     * <code>optional int32 latitude = 2;</code>
     *
     * <pre>
     *纬度
     * </pre>
     */
    int getLatitude();

    // optional int32 longitude = 3;
    /**
     * <code>optional int32 longitude = 3;</code>
     *
     * <pre>
     *经度
     * </pre>
     */
    boolean hasLongitude();
    /**
     * <code>optional int32 longitude = 3;</code>
     *
     * <pre>
     *经度
     * </pre>
     */
    int getLongitude();

    // optional int32 height = 4;
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *高程
     * </pre>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *高程
     * </pre>
     */
    int getHeight();

    // optional int32 engineOutputTorque = 5;
    /**
     * <code>optional int32 engineOutputTorque = 5;</code>
     *
     * <pre>
     *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
     * </pre>
     */
    boolean hasEngineOutputTorque();
    /**
     * <code>optional int32 engineOutputTorque = 5;</code>
     *
     * <pre>
     *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
     * </pre>
     */
    int getEngineOutputTorque();

    // optional int32 speed = 6;
    /**
     * <code>optional int32 speed = 6;</code>
     *
     * <pre>
     *GPS车速(综合车速)
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>optional int32 speed = 6;</code>
     *
     * <pre>
     *GPS车速(综合车速)
     * </pre>
     */
    int getSpeed();

    // optional int32 accelerator = 7;
    /**
     * <code>optional int32 accelerator = 7;</code>
     *
     * <pre>
     *油门开度
     * </pre>
     */
    boolean hasAccelerator();
    /**
     * <code>optional int32 accelerator = 7;</code>
     *
     * <pre>
     *油门开度
     * </pre>
     */
    int getAccelerator();

    // optional int32 brake = 8;
    /**
     * <code>optional int32 brake = 8;</code>
     *
     * <pre>
     *制动开关
     * </pre>
     */
    boolean hasBrake();
    /**
     * <code>optional int32 brake = 8;</code>
     *
     * <pre>
     *制动开关
     * </pre>
     */
    int getBrake();

    // optional int32 rotation = 9;
    /**
     * <code>optional int32 rotation = 9;</code>
     *
     * <pre>
     *发动机转速
     * </pre>
     */
    boolean hasRotation();
    /**
     * <code>optional int32 rotation = 9;</code>
     *
     * <pre>
     *发动机转速
     * </pre>
     */
    int getRotation();

    // optional int32 gear = 10;
    /**
     * <code>optional int32 gear = 10;</code>
     *
     * <pre>
     *当前挡位
     * </pre>
     */
    boolean hasGear();
    /**
     * <code>optional int32 gear = 10;</code>
     *
     * <pre>
     *当前挡位
     * </pre>
     */
    int getGear();

    // optional int32 clutchSwitch = 11;
    /**
     * <code>optional int32 clutchSwitch = 11;</code>
     *
     * <pre>
     *离合器开关
     * </pre>
     */
    boolean hasClutchSwitch();
    /**
     * <code>optional int32 clutchSwitch = 11;</code>
     *
     * <pre>
     *离合器开关
     * </pre>
     */
    int getClutchSwitch();

    // optional int32 realTimeOilConsumption = 12;
    /**
     * <code>optional int32 realTimeOilConsumption = 12;</code>
     *
     * <pre>
     *发动机瞬时油耗
     * </pre>
     */
    boolean hasRealTimeOilConsumption();
    /**
     * <code>optional int32 realTimeOilConsumption = 12;</code>
     *
     * <pre>
     *发动机瞬时油耗
     * </pre>
     */
    int getRealTimeOilConsumption();

    // optional int32 fuelConsumptionRate = 13;
    /**
     * <code>optional int32 fuelConsumptionRate = 13;</code>
     *
     * <pre>
     *发动机燃油消耗率 或 CN6 燃油流量
     * </pre>
     */
    boolean hasFuelConsumptionRate();
    /**
     * <code>optional int32 fuelConsumptionRate = 13;</code>
     *
     * <pre>
     *发动机燃油消耗率 或 CN6 燃油流量
     * </pre>
     */
    int getFuelConsumptionRate();

    // optional int32 retransmissionPackets = 38;
    /**
     * <code>optional int32 retransmissionPackets = 38;</code>
     *
     * <pre>
     *是否重传包
     * </pre>
     */
    boolean hasRetransmissionPackets();
    /**
     * <code>optional int32 retransmissionPackets = 38;</code>
     *
     * <pre>
     *是否重传包
     * </pre>
     */
    int getRetransmissionPackets();

    // optional int64 terminalId = 50;
    /**
     * <code>optional int64 terminalId = 50;</code>
     *
     * <pre>
     *终端sim卡号，手机号
     * </pre>
     */
    boolean hasTerminalId();
    /**
     * <code>optional int64 terminalId = 50;</code>
     *
     * <pre>
     *终端sim卡号，手机号
     * </pre>
     */
    long getTerminalId();

    // optional int64 serialNumber = 100;
    /**
     * <code>optional int64 serialNumber = 100;</code>
     *
     * <pre>
     *序列号
     * </pre>
     */
    boolean hasSerialNumber();
    /**
     * <code>optional int64 serialNumber = 100;</code>
     *
     * <pre>
     *序列号
     * </pre>
     */
    long getSerialNumber();

    // optional int64 receiveDate = 110;
    /**
     * <code>optional int64 receiveDate = 110;</code>
     *
     * <pre>
     *TA接收数据时间
     * </pre>
     */
    boolean hasReceiveDate();
    /**
     * <code>optional int64 receiveDate = 110;</code>
     *
     * <pre>
     *TA接收数据时间
     * </pre>
     */
    long getReceiveDate();

    // optional int32 originalLat = 120;
    /**
     * <code>optional int32 originalLat = 120;</code>
     *
     * <pre>
     *原始纬度
     * </pre>
     */
    boolean hasOriginalLat();
    /**
     * <code>optional int32 originalLat = 120;</code>
     *
     * <pre>
     *原始纬度
     * </pre>
     */
    int getOriginalLat();

    // optional int32 originalLng = 130;
    /**
     * <code>optional int32 originalLng = 130;</code>
     *
     * <pre>
     *原始经度
     * </pre>
     */
    boolean hasOriginalLng();
    /**
     * <code>optional int32 originalLng = 130;</code>
     *
     * <pre>
     *原始经度
     * </pre>
     */
    int getOriginalLng();

    // optional int32 protocolType = 220;
    /**
     * <code>optional int32 protocolType = 220;</code>
     *
     * <pre>
     *协议类型，0为37（默认为37），1为3B协议  2 为CN6
     * </pre>
     */
    boolean hasProtocolType();
    /**
     * <code>optional int32 protocolType = 220;</code>
     *
     * <pre>
     *协议类型，0为37（默认为37），1为3B协议  2 为CN6
     * </pre>
     */
    int getProtocolType();

    // optional int32 vehicleSpeed = 300;
    /**
     * <code>optional int32 vehicleSpeed = 300;</code>
     *
     * <pre>
     *-------------------------------------------------   cn6   -------------------------------------------------//
     * </pre>
     */
    boolean hasVehicleSpeed();
    /**
     * <code>optional int32 vehicleSpeed = 300;</code>
     *
     * <pre>
     *-------------------------------------------------   cn6   -------------------------------------------------//
     * </pre>
     */
    int getVehicleSpeed();

    // optional int32 barometricPressure = 301;
    /**
     * <code>optional int32 barometricPressure = 301;</code>
     *
     * <pre>
     *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
     * </pre>
     */
    boolean hasBarometricPressure();
    /**
     * <code>optional int32 barometricPressure = 301;</code>
     *
     * <pre>
     *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
     * </pre>
     */
    int getBarometricPressure();

    // optional int32 frictionTorque = 302;
    /**
     * <code>optional int32 frictionTorque = 302;</code>
     *
     * <pre>
     *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
     * </pre>
     */
    boolean hasFrictionTorque();
    /**
     * <code>optional int32 frictionTorque = 302;</code>
     *
     * <pre>
     *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
     * </pre>
     */
    int getFrictionTorque();

    // optional int32 scrUpStreamNOxSensorOutput = 303;
    /**
     * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
     *
     * <pre>
     *SCR 上游 NOx 传感器输出值
     * </pre>
     */
    boolean hasScrUpStreamNOxSensorOutput();
    /**
     * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
     *
     * <pre>
     *SCR 上游 NOx 传感器输出值
     * </pre>
     */
    int getScrUpStreamNOxSensorOutput();

    // optional int32 scrDownStreamNOxSensorOutput = 304;
    /**
     * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
     *
     * <pre>
     *SCR 下游 NOx 传感器输出值
     * </pre>
     */
    boolean hasScrDownStreamNOxSensorOutput();
    /**
     * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
     *
     * <pre>
     *SCR 下游 NOx 传感器输出值
     * </pre>
     */
    int getScrDownStreamNOxSensorOutput();

    // optional int32 reagentAllowance = 305;
    /**
     * <code>optional int32 reagentAllowance = 305;</code>
     *
     * <pre>
     *反应剂余量
     * </pre>
     */
    boolean hasReagentAllowance();
    /**
     * <code>optional int32 reagentAllowance = 305;</code>
     *
     * <pre>
     *反应剂余量
     * </pre>
     */
    int getReagentAllowance();

    // optional int32 airInflow = 306;
    /**
     * <code>optional int32 airInflow = 306;</code>
     *
     * <pre>
     *进气量
     * </pre>
     */
    boolean hasAirInflow();
    /**
     * <code>optional int32 airInflow = 306;</code>
     *
     * <pre>
     *进气量
     * </pre>
     */
    int getAirInflow();

    // optional int32 scrInletTemperature = 307;
    /**
     * <code>optional int32 scrInletTemperature = 307;</code>
     *
     * <pre>
     *SCR 入口温度
     * </pre>
     */
    boolean hasScrInletTemperature();
    /**
     * <code>optional int32 scrInletTemperature = 307;</code>
     *
     * <pre>
     *SCR 入口温度
     * </pre>
     */
    int getScrInletTemperature();

    // optional int32 scrOutletTemperature = 308;
    /**
     * <code>optional int32 scrOutletTemperature = 308;</code>
     *
     * <pre>
     *SCR 出口温度
     * </pre>
     */
    boolean hasScrOutletTemperature();
    /**
     * <code>optional int32 scrOutletTemperature = 308;</code>
     *
     * <pre>
     *SCR 出口温度
     * </pre>
     */
    int getScrOutletTemperature();

    // optional int32 dpfDropoutVoltage = 309;
    /**
     * <code>optional int32 dpfDropoutVoltage = 309;</code>
     *
     * <pre>
     *DPF压差
     * </pre>
     */
    boolean hasDpfDropoutVoltage();
    /**
     * <code>optional int32 dpfDropoutVoltage = 309;</code>
     *
     * <pre>
     *DPF压差
     * </pre>
     */
    int getDpfDropoutVoltage();

    // optional int32 engineCoolantTemperature = 310;
    /**
     * <code>optional int32 engineCoolantTemperature = 310;</code>
     *
     * <pre>
     *发动机冷却液温度
     * </pre>
     */
    boolean hasEngineCoolantTemperature();
    /**
     * <code>optional int32 engineCoolantTemperature = 310;</code>
     *
     * <pre>
     *发动机冷却液温度
     * </pre>
     */
    int getEngineCoolantTemperature();

    // optional int32 tankLevel = 311;
    /**
     * <code>optional int32 tankLevel = 311;</code>
     *
     * <pre>
     *油箱液位
     * </pre>
     */
    boolean hasTankLevel();
    /**
     * <code>optional int32 tankLevel = 311;</code>
     *
     * <pre>
     *油箱液位
     * </pre>
     */
    int getTankLevel();

    // optional int32 positioningState = 312;
    /**
     * <code>optional int32 positioningState = 312;</code>
     *
     * <pre>
     *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
     * </pre>
     */
    boolean hasPositioningState();
    /**
     * <code>optional int32 positioningState = 312;</code>
     *
     * <pre>
     *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
     * </pre>
     */
    int getPositioningState();

    // optional int64 mileage = 313;
    /**
     * <code>optional int64 mileage = 313;</code>
     *
     * <pre>
     *累计里程 CN6
     * </pre>
     */
    boolean hasMileage();
    /**
     * <code>optional int64 mileage = 313;</code>
     *
     * <pre>
     *累计里程 CN6
     * </pre>
     */
    long getMileage();

    // optional string rValue = 314;
    /**
     * <code>optional string rValue = 314;</code>
     *
     * <pre>
     *16进制ASCII编码 R值
     * </pre>
     */
    boolean hasRValue();
    /**
     * <code>optional string rValue = 314;</code>
     *
     * <pre>
     *16进制ASCII编码 R值
     * </pre>
     */
    String getRValue();
    /**
     * <code>optional string rValue = 314;</code>
     *
     * <pre>
     *16进制ASCII编码 R值
     * </pre>
     */
    com.google.protobuf.ByteString
        getRValueBytes();

    // optional string sValue = 315;
    /**
     * <code>optional string sValue = 315;</code>
     *
     * <pre>
     *16进制ASCII编码 S值
     * </pre>
     */
    boolean hasSValue();
    /**
     * <code>optional string sValue = 315;</code>
     *
     * <pre>
     *16进制ASCII编码 S值
     * </pre>
     */
    String getSValue();
    /**
     * <code>optional string sValue = 315;</code>
     *
     * <pre>
     *16进制ASCII编码 S值
     * </pre>
     */
    com.google.protobuf.ByteString
        getSValueBytes();

    // optional int32 commandUnit = 316;
    /**
     * <code>optional int32 commandUnit = 316;</code>
     *
     * <pre>
     *命令单元
     * </pre>
     */
    boolean hasCommandUnit();
    /**
     * <code>optional int32 commandUnit = 316;</code>
     *
     * <pre>
     *命令单元
     * </pre>
     */
    int getCommandUnit();

    // optional string vin = 317;
    /**
     * <code>optional string vin = 317;</code>
     *
     * <pre>
     *车辆识别码
     * </pre>
     */
    boolean hasVin();
    /**
     * <code>optional string vin = 317;</code>
     *
     * <pre>
     *车辆识别码
     * </pre>
     */
    String getVin();
    /**
     * <code>optional string vin = 317;</code>
     *
     * <pre>
     *车辆识别码
     * </pre>
     */
    com.google.protobuf.ByteString
        getVinBytes();

    // optional int32 terminalVersion = 318;
    /**
     * <code>optional int32 terminalVersion = 318;</code>
     *
     * <pre>
     *终端软件版本号
     * </pre>
     */
    boolean hasTerminalVersion();
    /**
     * <code>optional int32 terminalVersion = 318;</code>
     *
     * <pre>
     *终端软件版本号
     * </pre>
     */
    int getTerminalVersion();

    // optional int32 encryption = 319;
    /**
     * <code>optional int32 encryption = 319;</code>
     *
     * <pre>
     *数据加密方式
     * </pre>
     */
    boolean hasEncryption();
    /**
     * <code>optional int32 encryption = 319;</code>
     *
     * <pre>
     *数据加密方式
     * </pre>
     */
    int getEncryption();

    // optional int32 rLength = 320;
    /**
     * <code>optional int32 rLength = 320;</code>
     *
     * <pre>
     *R值 长度
     * </pre>
     */
    boolean hasRLength();
    /**
     * <code>optional int32 rLength = 320;</code>
     *
     * <pre>
     *R值 长度
     * </pre>
     */
    int getRLength();

    // optional int32 sLength = 321;
    /**
     * <code>optional int32 sLength = 321;</code>
     *
     * <pre>
     *S值 长度
     * </pre>
     */
    boolean hasSLength();
    /**
     * <code>optional int32 sLength = 321;</code>
     *
     * <pre>
     *S值 长度
     * </pre>
     */
    int getSLength();

    // optional int32 engineBrakingState = 405;
    /**
     * <code>optional int32 engineBrakingState = 405;</code>
     *
     * <pre>
     *发动机制动状态
     * </pre>
     */
    boolean hasEngineBrakingState();
    /**
     * <code>optional int32 engineBrakingState = 405;</code>
     *
     * <pre>
     *发动机制动状态
     * </pre>
     */
    int getEngineBrakingState();

    // optional int32 exhaustBrakingState = 410;
    /**
     * <code>optional int32 exhaustBrakingState = 410;</code>
     *
     * <pre>
     *排气制动状态
     * </pre>
     */
    boolean hasExhaustBrakingState();
    /**
     * <code>optional int32 exhaustBrakingState = 410;</code>
     *
     * <pre>
     *排气制动状态
     * </pre>
     */
    int getExhaustBrakingState();

    // optional int32 emptySignal = 415;
    /**
     * <code>optional int32 emptySignal = 415;</code>
     *
     * <pre>
     *空挡信号
     * </pre>
     */
    boolean hasEmptySignal();
    /**
     * <code>optional int32 emptySignal = 415;</code>
     *
     * <pre>
     *空挡信号
     * </pre>
     */
    int getEmptySignal();

    // optional int32 exhaustFlow = 420;
    /**
     * <code>optional int32 exhaustFlow = 420;</code>
     *
     * <pre>
     *排气流量
     * </pre>
     */
    boolean hasExhaustFlow();
    /**
     * <code>optional int32 exhaustFlow = 420;</code>
     *
     * <pre>
     *排气流量
     * </pre>
     */
    int getExhaustFlow();

    // optional int32 fanSpeed = 425;
    /**
     * <code>optional int32 fanSpeed = 425;</code>
     *
     * <pre>
     *风扇转速
     * </pre>
     */
    boolean hasFanSpeed();
    /**
     * <code>optional int32 fanSpeed = 425;</code>
     *
     * <pre>
     *风扇转速
     * </pre>
     */
    int getFanSpeed();

    // optional int32 mechanicalBoxGear = 430;
    /**
     * <code>optional int32 mechanicalBoxGear = 430;</code>
     *
     * <pre>
     *档位（机械箱）
     * </pre>
     */
    boolean hasMechanicalBoxGear();
    /**
     * <code>optional int32 mechanicalBoxGear = 430;</code>
     *
     * <pre>
     *档位（机械箱）
     * </pre>
     */
    int getMechanicalBoxGear();

    // optional int32 instrumentSpeed = 435;
    /**
     * <code>optional int32 instrumentSpeed = 435;</code>
     *
     * <pre>
     *仪表车速
     * </pre>
     */
    boolean hasInstrumentSpeed();
    /**
     * <code>optional int32 instrumentSpeed = 435;</code>
     *
     * <pre>
     *仪表车速
     * </pre>
     */
    int getInstrumentSpeed();

    // optional int32 wheelSpeed = 436;
    /**
     * <code>optional int32 wheelSpeed = 436;</code>
     *
     * <pre>
     *车轮车速
     * </pre>
     */
    boolean hasWheelSpeed();
    /**
     * <code>optional int32 wheelSpeed = 436;</code>
     *
     * <pre>
     *车轮车速
     * </pre>
     */
    int getWheelSpeed();

    // optional int32 parkingBrakeSwitch = 437;
    /**
     * <code>optional int32 parkingBrakeSwitch = 437;</code>
     *
     * <pre>
     *驻车制动开关
     * </pre>
     */
    boolean hasParkingBrakeSwitch();
    /**
     * <code>optional int32 parkingBrakeSwitch = 437;</code>
     *
     * <pre>
     *驻车制动开关
     * </pre>
     */
    int getParkingBrakeSwitch();

    // optional int32 cruiseControlSettingSwitch = 438;
    /**
     * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
     *
     * <pre>
     *巡航控制设置开关
     * </pre>
     */
    boolean hasCruiseControlSettingSwitch();
    /**
     * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
     *
     * <pre>
     *巡航控制设置开关
     * </pre>
     */
    int getCruiseControlSettingSwitch();

    // optional int32 targetGear = 439;
    /**
     * <code>optional int32 targetGear = 439;</code>
     *
     * <pre>
     *目标档位
     * </pre>
     */
    boolean hasTargetGear();
    /**
     * <code>optional int32 targetGear = 439;</code>
     *
     * <pre>
     *目标档位
     * </pre>
     */
    int getTargetGear();

    // optional int32 slope = 440;
    /**
     * <code>optional int32 slope = 440;</code>
     *
     * <pre>
     *坡度
     * </pre>
     */
    boolean hasSlope();
    /**
     * <code>optional int32 slope = 440;</code>
     *
     * <pre>
     *坡度
     * </pre>
     */
    int getSlope();

    // optional int32 load = 441;
    /**
     * <code>optional int32 load = 441;</code>
     *
     * <pre>
     *载重
     * </pre>
     */
    boolean hasLoad();
    /**
     * <code>optional int32 load = 441;</code>
     *
     * <pre>
     *载重
     * </pre>
     */
    int getLoad();

    // optional int32 fuelLevel = 442;
    /**
     * <code>optional int32 fuelLevel = 442;</code>
     *
     * <pre>
     *燃油液位
     * </pre>
     */
    boolean hasFuelLevel();
    /**
     * <code>optional int32 fuelLevel = 442;</code>
     *
     * <pre>
     *燃油液位
     * </pre>
     */
    int getFuelLevel();

    // optional int32 waterTemperature = 443;
    /**
     * <code>optional int32 waterTemperature = 443;</code>
     *
     * <pre>
     *水温
     * </pre>
     */
    boolean hasWaterTemperature();
    /**
     * <code>optional int32 waterTemperature = 443;</code>
     *
     * <pre>
     *水温
     * </pre>
     */
    int getWaterTemperature();

    // optional int32 atmosphericPressure = 444;
    /**
     * <code>optional int32 atmosphericPressure = 444;</code>
     *
     * <pre>
     *大气压力
     * </pre>
     */
    boolean hasAtmosphericPressure();
    /**
     * <code>optional int32 atmosphericPressure = 444;</code>
     *
     * <pre>
     *大气压力
     * </pre>
     */
    int getAtmosphericPressure();

    // optional int32 intakeAirTemperature = 445;
    /**
     * <code>optional int32 intakeAirTemperature = 445;</code>
     *
     * <pre>
     *进气温度
     * </pre>
     */
    boolean hasIntakeAirTemperature();
    /**
     * <code>optional int32 intakeAirTemperature = 445;</code>
     *
     * <pre>
     *进气温度
     * </pre>
     */
    int getIntakeAirTemperature();

    // optional int32 atmosphericTemperature = 446;
    /**
     * <code>optional int32 atmosphericTemperature = 446;</code>
     *
     * <pre>
     *大气温度
     * </pre>
     */
    boolean hasAtmosphericTemperature();
    /**
     * <code>optional int32 atmosphericTemperature = 446;</code>
     *
     * <pre>
     *大气温度
     * </pre>
     */
    int getAtmosphericTemperature();

    // optional int32 exhaustGasTemperature = 447;
    /**
     * <code>optional int32 exhaustGasTemperature = 447;</code>
     *
     * <pre>
     *排气温度
     * </pre>
     */
    boolean hasExhaustGasTemperature();
    /**
     * <code>optional int32 exhaustGasTemperature = 447;</code>
     *
     * <pre>
     *排气温度
     * </pre>
     */
    int getExhaustGasTemperature();

    // optional int32 intakeManifoldBoostPressure = 448;
    /**
     * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
     *
     * <pre>
     *进气歧管增压压力
     * </pre>
     */
    boolean hasIntakeManifoldBoostPressure();
    /**
     * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
     *
     * <pre>
     *进气歧管增压压力
     * </pre>
     */
    int getIntakeManifoldBoostPressure();

    // optional int32 relativePressure = 449;
    /**
     * <code>optional int32 relativePressure = 449;</code>
     *
     * <pre>
     *相对压力
     * </pre>
     */
    boolean hasRelativePressure();
    /**
     * <code>optional int32 relativePressure = 449;</code>
     *
     * <pre>
     *相对压力
     * </pre>
     */
    int getRelativePressure();

    // optional int32 engineTorqueMode = 450;
    /**
     * <code>optional int32 engineTorqueMode = 450;</code>
     *
     * <pre>
     *发动机扭矩模式
     * </pre>
     */
    boolean hasEngineTorqueMode();
    /**
     * <code>optional int32 engineTorqueMode = 450;</code>
     *
     * <pre>
     *发动机扭矩模式
     * </pre>
     */
    int getEngineTorqueMode();

    // optional int32 oilPressure = 451;
    /**
     * <code>optional int32 oilPressure = 451;</code>
     *
     * <pre>
     *机油压力
     * </pre>
     */
    boolean hasOilPressure();
    /**
     * <code>optional int32 oilPressure = 451;</code>
     *
     * <pre>
     *机油压力
     * </pre>
     */
    int getOilPressure();

    // optional int32 ureaLevel = 452;
    /**
     * <code>optional int32 ureaLevel = 452;</code>
     *
     * <pre>
     *尿素液位
     * </pre>
     */
    boolean hasUreaLevel();
    /**
     * <code>optional int32 ureaLevel = 452;</code>
     *
     * <pre>
     *尿素液位
     * </pre>
     */
    int getUreaLevel();

    // optional int64 statusFlag = 453;
    /**
     * <code>optional int64 statusFlag = 453;</code>
     *
     * <pre>
     *状态标志位
     * </pre>
     */
    boolean hasStatusFlag();
    /**
     * <code>optional int64 statusFlag = 453;</code>
     *
     * <pre>
     *状态标志位
     * </pre>
     */
    long getStatusFlag();

    // optional int32 brakeRate = 454;
    /**
     * <code>optional int32 brakeRate = 454;</code>
     *
     * <pre>
     *制动踏板开度
     * </pre>
     */
    boolean hasBrakeRate();
    /**
     * <code>optional int32 brakeRate = 454;</code>
     *
     * <pre>
     *制动踏板开度
     * </pre>
     */
    int getBrakeRate();

    // optional int32 gpsDirection = 455;
    /**
     * <code>optional int32 gpsDirection = 455;</code>
     *
     * <pre>
     *GSP方向
     * </pre>
     */
    boolean hasGpsDirection();
    /**
     * <code>optional int32 gpsDirection = 455;</code>
     *
     * <pre>
     *GSP方向
     * </pre>
     */
    int getGpsDirection();

    // optional int32 airConditionStatus = 456;
    /**
     * <code>optional int32 airConditionStatus = 456;</code>
     *
     * <pre>
     *空调压缩机状态
     * </pre>
     */
    boolean hasAirConditionStatus();
    /**
     * <code>optional int32 airConditionStatus = 456;</code>
     *
     * <pre>
     *空调压缩机状态
     * </pre>
     */
    int getAirConditionStatus();

    // optional int32 transmissionRotation = 457;
    /**
     * <code>optional int32 transmissionRotation = 457;</code>
     *
     * <pre>
     *变速箱转速
     * </pre>
     */
    boolean hasTransmissionRotation();
    /**
     * <code>optional int32 transmissionRotation = 457;</code>
     *
     * <pre>
     *变速箱转速
     * </pre>
     */
    int getTransmissionRotation();

    // optional string part_time = 5000;
    /**
     * <code>optional string part_time = 5000;</code>
     *
     * <pre>
     *这里主要给落入hdfs的数据做分区用，加字段请在上面加
     * </pre>
     */
    boolean hasPartTime();
    /**
     * <code>optional string part_time = 5000;</code>
     *
     * <pre>
     *这里主要给落入hdfs的数据做分区用，加字段请在上面加
     * </pre>
     */
    String getPartTime();
    /**
     * <code>optional string part_time = 5000;</code>
     *
     * <pre>
     *这里主要给落入hdfs的数据做分区用，加字段请在上面加
     * </pre>
     */
    com.google.protobuf.ByteString
        getPartTimeBytes();
  }
  /**
   * Protobuf type {@code RealTimeData}
   *
   * <pre>
   *密集数据上报模型
   * </pre>
   */
  public static final class RealTimeData extends
      com.google.protobuf.GeneratedMessage
      implements RealTimeDataOrBuilder {
    // Use RealTimeData.newBuilder() to construct.
    private RealTimeData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RealTimeData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RealTimeData defaultInstance;
    public static RealTimeData getDefaultInstance() {
      return defaultInstance;
    }

    public RealTimeData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RealTimeData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gpsTime_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              latitude_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              longitude_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              height_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              engineOutputTorque_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              speed_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              accelerator_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              brake_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              rotation_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              gear_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              clutchSwitch_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              realTimeOilConsumption_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              fuelConsumptionRate_ = input.readInt32();
              break;
            }
            case 304: {
              bitField0_ |= 0x00002000;
              retransmissionPackets_ = input.readInt32();
              break;
            }
            case 400: {
              bitField0_ |= 0x00004000;
              terminalId_ = input.readInt64();
              break;
            }
            case 800: {
              bitField0_ |= 0x00008000;
              serialNumber_ = input.readInt64();
              break;
            }
            case 880: {
              bitField0_ |= 0x00010000;
              receiveDate_ = input.readInt64();
              break;
            }
            case 960: {
              bitField0_ |= 0x00020000;
              originalLat_ = input.readInt32();
              break;
            }
            case 1040: {
              bitField0_ |= 0x00040000;
              originalLng_ = input.readInt32();
              break;
            }
            case 1760: {
              bitField0_ |= 0x00080000;
              protocolType_ = input.readInt32();
              break;
            }
            case 2400: {
              bitField0_ |= 0x00100000;
              vehicleSpeed_ = input.readInt32();
              break;
            }
            case 2408: {
              bitField0_ |= 0x00200000;
              barometricPressure_ = input.readInt32();
              break;
            }
            case 2416: {
              bitField0_ |= 0x00400000;
              frictionTorque_ = input.readInt32();
              break;
            }
            case 2424: {
              bitField0_ |= 0x00800000;
              scrUpStreamNOxSensorOutput_ = input.readInt32();
              break;
            }
            case 2432: {
              bitField0_ |= 0x01000000;
              scrDownStreamNOxSensorOutput_ = input.readInt32();
              break;
            }
            case 2440: {
              bitField0_ |= 0x02000000;
              reagentAllowance_ = input.readInt32();
              break;
            }
            case 2448: {
              bitField0_ |= 0x04000000;
              airInflow_ = input.readInt32();
              break;
            }
            case 2456: {
              bitField0_ |= 0x08000000;
              scrInletTemperature_ = input.readInt32();
              break;
            }
            case 2464: {
              bitField0_ |= 0x10000000;
              scrOutletTemperature_ = input.readInt32();
              break;
            }
            case 2472: {
              bitField0_ |= 0x20000000;
              dpfDropoutVoltage_ = input.readInt32();
              break;
            }
            case 2480: {
              bitField0_ |= 0x40000000;
              engineCoolantTemperature_ = input.readInt32();
              break;
            }
            case 2488: {
              bitField0_ |= 0x80000000;
              tankLevel_ = input.readInt32();
              break;
            }
            case 2496: {
              bitField1_ |= 0x00000001;
              positioningState_ = input.readInt32();
              break;
            }
            case 2504: {
              bitField1_ |= 0x00000002;
              mileage_ = input.readInt64();
              break;
            }
            case 2514: {
              bitField1_ |= 0x00000004;
              rValue_ = input.readBytes();
              break;
            }
            case 2522: {
              bitField1_ |= 0x00000008;
              sValue_ = input.readBytes();
              break;
            }
            case 2528: {
              bitField1_ |= 0x00000010;
              commandUnit_ = input.readInt32();
              break;
            }
            case 2538: {
              bitField1_ |= 0x00000020;
              vin_ = input.readBytes();
              break;
            }
            case 2544: {
              bitField1_ |= 0x00000040;
              terminalVersion_ = input.readInt32();
              break;
            }
            case 2552: {
              bitField1_ |= 0x00000080;
              encryption_ = input.readInt32();
              break;
            }
            case 2560: {
              bitField1_ |= 0x00000100;
              rLength_ = input.readInt32();
              break;
            }
            case 2568: {
              bitField1_ |= 0x00000200;
              sLength_ = input.readInt32();
              break;
            }
            case 3240: {
              bitField1_ |= 0x00000400;
              engineBrakingState_ = input.readInt32();
              break;
            }
            case 3280: {
              bitField1_ |= 0x00000800;
              exhaustBrakingState_ = input.readInt32();
              break;
            }
            case 3320: {
              bitField1_ |= 0x00001000;
              emptySignal_ = input.readInt32();
              break;
            }
            case 3360: {
              bitField1_ |= 0x00002000;
              exhaustFlow_ = input.readInt32();
              break;
            }
            case 3400: {
              bitField1_ |= 0x00004000;
              fanSpeed_ = input.readInt32();
              break;
            }
            case 3440: {
              bitField1_ |= 0x00008000;
              mechanicalBoxGear_ = input.readInt32();
              break;
            }
            case 3480: {
              bitField1_ |= 0x00010000;
              instrumentSpeed_ = input.readInt32();
              break;
            }
            case 3488: {
              bitField1_ |= 0x00020000;
              wheelSpeed_ = input.readInt32();
              break;
            }
            case 3496: {
              bitField1_ |= 0x00040000;
              parkingBrakeSwitch_ = input.readInt32();
              break;
            }
            case 3504: {
              bitField1_ |= 0x00080000;
              cruiseControlSettingSwitch_ = input.readInt32();
              break;
            }
            case 3512: {
              bitField1_ |= 0x00100000;
              targetGear_ = input.readInt32();
              break;
            }
            case 3520: {
              bitField1_ |= 0x00200000;
              slope_ = input.readInt32();
              break;
            }
            case 3528: {
              bitField1_ |= 0x00400000;
              load_ = input.readInt32();
              break;
            }
            case 3536: {
              bitField1_ |= 0x00800000;
              fuelLevel_ = input.readInt32();
              break;
            }
            case 3544: {
              bitField1_ |= 0x01000000;
              waterTemperature_ = input.readInt32();
              break;
            }
            case 3552: {
              bitField1_ |= 0x02000000;
              atmosphericPressure_ = input.readInt32();
              break;
            }
            case 3560: {
              bitField1_ |= 0x04000000;
              intakeAirTemperature_ = input.readInt32();
              break;
            }
            case 3568: {
              bitField1_ |= 0x08000000;
              atmosphericTemperature_ = input.readInt32();
              break;
            }
            case 3576: {
              bitField1_ |= 0x10000000;
              exhaustGasTemperature_ = input.readInt32();
              break;
            }
            case 3584: {
              bitField1_ |= 0x20000000;
              intakeManifoldBoostPressure_ = input.readInt32();
              break;
            }
            case 3592: {
              bitField1_ |= 0x40000000;
              relativePressure_ = input.readInt32();
              break;
            }
            case 3600: {
              bitField1_ |= 0x80000000;
              engineTorqueMode_ = input.readInt32();
              break;
            }
            case 3608: {
              bitField2_ |= 0x00000001;
              oilPressure_ = input.readInt32();
              break;
            }
            case 3616: {
              bitField2_ |= 0x00000002;
              ureaLevel_ = input.readInt32();
              break;
            }
            case 3624: {
              bitField2_ |= 0x00000004;
              statusFlag_ = input.readInt64();
              break;
            }
            case 3632: {
              bitField2_ |= 0x00000008;
              brakeRate_ = input.readInt32();
              break;
            }
            case 3640: {
              bitField2_ |= 0x00000010;
              gpsDirection_ = input.readInt32();
              break;
            }
            case 3648: {
              bitField2_ |= 0x00000020;
              airConditionStatus_ = input.readInt32();
              break;
            }
            case 3656: {
              bitField2_ |= 0x00000040;
              transmissionRotation_ = input.readInt32();
              break;
            }
            case 40002: {
              bitField2_ |= 0x00000080;
              partTime_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return internal_static_RealTimeData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return internal_static_RealTimeData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData.class, com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData.Builder.class);
    }

    public static com.google.protobuf.Parser<RealTimeData> PARSER =
        new com.google.protobuf.AbstractParser<RealTimeData>() {
      public RealTimeData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RealTimeData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<RealTimeData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    // required int64 gpsTime = 1;
    public static final int GPSTIME_FIELD_NUMBER = 1;
    private long gpsTime_;
    /**
     * <code>required int64 gpsTime = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public boolean hasGpsTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 gpsTime = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public long getGpsTime() {
      return gpsTime_;
    }

    // optional int32 latitude = 2;
    public static final int LATITUDE_FIELD_NUMBER = 2;
    private int latitude_;
    /**
     * <code>optional int32 latitude = 2;</code>
     *
     * <pre>
     *纬度
     * </pre>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 latitude = 2;</code>
     *
     * <pre>
     *纬度
     * </pre>
     */
    public int getLatitude() {
      return latitude_;
    }

    // optional int32 longitude = 3;
    public static final int LONGITUDE_FIELD_NUMBER = 3;
    private int longitude_;
    /**
     * <code>optional int32 longitude = 3;</code>
     *
     * <pre>
     *经度
     * </pre>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 longitude = 3;</code>
     *
     * <pre>
     *经度
     * </pre>
     */
    public int getLongitude() {
      return longitude_;
    }

    // optional int32 height = 4;
    public static final int HEIGHT_FIELD_NUMBER = 4;
    private int height_;
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *高程
     * </pre>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *高程
     * </pre>
     */
    public int getHeight() {
      return height_;
    }

    // optional int32 engineOutputTorque = 5;
    public static final int ENGINEOUTPUTTORQUE_FIELD_NUMBER = 5;
    private int engineOutputTorque_;
    /**
     * <code>optional int32 engineOutputTorque = 5;</code>
     *
     * <pre>
     *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
     * </pre>
     */
    public boolean hasEngineOutputTorque() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 engineOutputTorque = 5;</code>
     *
     * <pre>
     *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
     * </pre>
     */
    public int getEngineOutputTorque() {
      return engineOutputTorque_;
    }

    // optional int32 speed = 6;
    public static final int SPEED_FIELD_NUMBER = 6;
    private int speed_;
    /**
     * <code>optional int32 speed = 6;</code>
     *
     * <pre>
     *GPS车速(综合车速)
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 speed = 6;</code>
     *
     * <pre>
     *GPS车速(综合车速)
     * </pre>
     */
    public int getSpeed() {
      return speed_;
    }

    // optional int32 accelerator = 7;
    public static final int ACCELERATOR_FIELD_NUMBER = 7;
    private int accelerator_;
    /**
     * <code>optional int32 accelerator = 7;</code>
     *
     * <pre>
     *油门开度
     * </pre>
     */
    public boolean hasAccelerator() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 accelerator = 7;</code>
     *
     * <pre>
     *油门开度
     * </pre>
     */
    public int getAccelerator() {
      return accelerator_;
    }

    // optional int32 brake = 8;
    public static final int BRAKE_FIELD_NUMBER = 8;
    private int brake_;
    /**
     * <code>optional int32 brake = 8;</code>
     *
     * <pre>
     *制动开关
     * </pre>
     */
    public boolean hasBrake() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 brake = 8;</code>
     *
     * <pre>
     *制动开关
     * </pre>
     */
    public int getBrake() {
      return brake_;
    }

    // optional int32 rotation = 9;
    public static final int ROTATION_FIELD_NUMBER = 9;
    private int rotation_;
    /**
     * <code>optional int32 rotation = 9;</code>
     *
     * <pre>
     *发动机转速
     * </pre>
     */
    public boolean hasRotation() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 rotation = 9;</code>
     *
     * <pre>
     *发动机转速
     * </pre>
     */
    public int getRotation() {
      return rotation_;
    }

    // optional int32 gear = 10;
    public static final int GEAR_FIELD_NUMBER = 10;
    private int gear_;
    /**
     * <code>optional int32 gear = 10;</code>
     *
     * <pre>
     *当前挡位
     * </pre>
     */
    public boolean hasGear() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 gear = 10;</code>
     *
     * <pre>
     *当前挡位
     * </pre>
     */
    public int getGear() {
      return gear_;
    }

    // optional int32 clutchSwitch = 11;
    public static final int CLUTCHSWITCH_FIELD_NUMBER = 11;
    private int clutchSwitch_;
    /**
     * <code>optional int32 clutchSwitch = 11;</code>
     *
     * <pre>
     *离合器开关
     * </pre>
     */
    public boolean hasClutchSwitch() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 clutchSwitch = 11;</code>
     *
     * <pre>
     *离合器开关
     * </pre>
     */
    public int getClutchSwitch() {
      return clutchSwitch_;
    }

    // optional int32 realTimeOilConsumption = 12;
    public static final int REALTIMEOILCONSUMPTION_FIELD_NUMBER = 12;
    private int realTimeOilConsumption_;
    /**
     * <code>optional int32 realTimeOilConsumption = 12;</code>
     *
     * <pre>
     *发动机瞬时油耗
     * </pre>
     */
    public boolean hasRealTimeOilConsumption() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 realTimeOilConsumption = 12;</code>
     *
     * <pre>
     *发动机瞬时油耗
     * </pre>
     */
    public int getRealTimeOilConsumption() {
      return realTimeOilConsumption_;
    }

    // optional int32 fuelConsumptionRate = 13;
    public static final int FUELCONSUMPTIONRATE_FIELD_NUMBER = 13;
    private int fuelConsumptionRate_;
    /**
     * <code>optional int32 fuelConsumptionRate = 13;</code>
     *
     * <pre>
     *发动机燃油消耗率 或 CN6 燃油流量
     * </pre>
     */
    public boolean hasFuelConsumptionRate() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 fuelConsumptionRate = 13;</code>
     *
     * <pre>
     *发动机燃油消耗率 或 CN6 燃油流量
     * </pre>
     */
    public int getFuelConsumptionRate() {
      return fuelConsumptionRate_;
    }

    // optional int32 retransmissionPackets = 38;
    public static final int RETRANSMISSIONPACKETS_FIELD_NUMBER = 38;
    private int retransmissionPackets_;
    /**
     * <code>optional int32 retransmissionPackets = 38;</code>
     *
     * <pre>
     *是否重传包
     * </pre>
     */
    public boolean hasRetransmissionPackets() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 retransmissionPackets = 38;</code>
     *
     * <pre>
     *是否重传包
     * </pre>
     */
    public int getRetransmissionPackets() {
      return retransmissionPackets_;
    }

    // optional int64 terminalId = 50;
    public static final int TERMINALID_FIELD_NUMBER = 50;
    private long terminalId_;
    /**
     * <code>optional int64 terminalId = 50;</code>
     *
     * <pre>
     *终端sim卡号，手机号
     * </pre>
     */
    public boolean hasTerminalId() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int64 terminalId = 50;</code>
     *
     * <pre>
     *终端sim卡号，手机号
     * </pre>
     */
    public long getTerminalId() {
      return terminalId_;
    }

    // optional int64 serialNumber = 100;
    public static final int SERIALNUMBER_FIELD_NUMBER = 100;
    private long serialNumber_;
    /**
     * <code>optional int64 serialNumber = 100;</code>
     *
     * <pre>
     *序列号
     * </pre>
     */
    public boolean hasSerialNumber() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int64 serialNumber = 100;</code>
     *
     * <pre>
     *序列号
     * </pre>
     */
    public long getSerialNumber() {
      return serialNumber_;
    }

    // optional int64 receiveDate = 110;
    public static final int RECEIVEDATE_FIELD_NUMBER = 110;
    private long receiveDate_;
    /**
     * <code>optional int64 receiveDate = 110;</code>
     *
     * <pre>
     *TA接收数据时间
     * </pre>
     */
    public boolean hasReceiveDate() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int64 receiveDate = 110;</code>
     *
     * <pre>
     *TA接收数据时间
     * </pre>
     */
    public long getReceiveDate() {
      return receiveDate_;
    }

    // optional int32 originalLat = 120;
    public static final int ORIGINALLAT_FIELD_NUMBER = 120;
    private int originalLat_;
    /**
     * <code>optional int32 originalLat = 120;</code>
     *
     * <pre>
     *原始纬度
     * </pre>
     */
    public boolean hasOriginalLat() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 originalLat = 120;</code>
     *
     * <pre>
     *原始纬度
     * </pre>
     */
    public int getOriginalLat() {
      return originalLat_;
    }

    // optional int32 originalLng = 130;
    public static final int ORIGINALLNG_FIELD_NUMBER = 130;
    private int originalLng_;
    /**
     * <code>optional int32 originalLng = 130;</code>
     *
     * <pre>
     *原始经度
     * </pre>
     */
    public boolean hasOriginalLng() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 originalLng = 130;</code>
     *
     * <pre>
     *原始经度
     * </pre>
     */
    public int getOriginalLng() {
      return originalLng_;
    }

    // optional int32 protocolType = 220;
    public static final int PROTOCOLTYPE_FIELD_NUMBER = 220;
    private int protocolType_;
    /**
     * <code>optional int32 protocolType = 220;</code>
     *
     * <pre>
     *协议类型，0为37（默认为37），1为3B协议  2 为CN6
     * </pre>
     */
    public boolean hasProtocolType() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 protocolType = 220;</code>
     *
     * <pre>
     *协议类型，0为37（默认为37），1为3B协议  2 为CN6
     * </pre>
     */
    public int getProtocolType() {
      return protocolType_;
    }

    // optional int32 vehicleSpeed = 300;
    public static final int VEHICLESPEED_FIELD_NUMBER = 300;
    private int vehicleSpeed_;
    /**
     * <code>optional int32 vehicleSpeed = 300;</code>
     *
     * <pre>
     *-------------------------------------------------   cn6   -------------------------------------------------//
     * </pre>
     */
    public boolean hasVehicleSpeed() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 vehicleSpeed = 300;</code>
     *
     * <pre>
     *-------------------------------------------------   cn6   -------------------------------------------------//
     * </pre>
     */
    public int getVehicleSpeed() {
      return vehicleSpeed_;
    }

    // optional int32 barometricPressure = 301;
    public static final int BAROMETRICPRESSURE_FIELD_NUMBER = 301;
    private int barometricPressure_;
    /**
     * <code>optional int32 barometricPressure = 301;</code>
     *
     * <pre>
     *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
     * </pre>
     */
    public boolean hasBarometricPressure() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional int32 barometricPressure = 301;</code>
     *
     * <pre>
     *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
     * </pre>
     */
    public int getBarometricPressure() {
      return barometricPressure_;
    }

    // optional int32 frictionTorque = 302;
    public static final int FRICTIONTORQUE_FIELD_NUMBER = 302;
    private int frictionTorque_;
    /**
     * <code>optional int32 frictionTorque = 302;</code>
     *
     * <pre>
     *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
     * </pre>
     */
    public boolean hasFrictionTorque() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional int32 frictionTorque = 302;</code>
     *
     * <pre>
     *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
     * </pre>
     */
    public int getFrictionTorque() {
      return frictionTorque_;
    }

    // optional int32 scrUpStreamNOxSensorOutput = 303;
    public static final int SCRUPSTREAMNOXSENSOROUTPUT_FIELD_NUMBER = 303;
    private int scrUpStreamNOxSensorOutput_;
    /**
     * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
     *
     * <pre>
     *SCR 上游 NOx 传感器输出值
     * </pre>
     */
    public boolean hasScrUpStreamNOxSensorOutput() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
     *
     * <pre>
     *SCR 上游 NOx 传感器输出值
     * </pre>
     */
    public int getScrUpStreamNOxSensorOutput() {
      return scrUpStreamNOxSensorOutput_;
    }

    // optional int32 scrDownStreamNOxSensorOutput = 304;
    public static final int SCRDOWNSTREAMNOXSENSOROUTPUT_FIELD_NUMBER = 304;
    private int scrDownStreamNOxSensorOutput_;
    /**
     * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
     *
     * <pre>
     *SCR 下游 NOx 传感器输出值
     * </pre>
     */
    public boolean hasScrDownStreamNOxSensorOutput() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
     *
     * <pre>
     *SCR 下游 NOx 传感器输出值
     * </pre>
     */
    public int getScrDownStreamNOxSensorOutput() {
      return scrDownStreamNOxSensorOutput_;
    }

    // optional int32 reagentAllowance = 305;
    public static final int REAGENTALLOWANCE_FIELD_NUMBER = 305;
    private int reagentAllowance_;
    /**
     * <code>optional int32 reagentAllowance = 305;</code>
     *
     * <pre>
     *反应剂余量
     * </pre>
     */
    public boolean hasReagentAllowance() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 reagentAllowance = 305;</code>
     *
     * <pre>
     *反应剂余量
     * </pre>
     */
    public int getReagentAllowance() {
      return reagentAllowance_;
    }

    // optional int32 airInflow = 306;
    public static final int AIRINFLOW_FIELD_NUMBER = 306;
    private int airInflow_;
    /**
     * <code>optional int32 airInflow = 306;</code>
     *
     * <pre>
     *进气量
     * </pre>
     */
    public boolean hasAirInflow() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 airInflow = 306;</code>
     *
     * <pre>
     *进气量
     * </pre>
     */
    public int getAirInflow() {
      return airInflow_;
    }

    // optional int32 scrInletTemperature = 307;
    public static final int SCRINLETTEMPERATURE_FIELD_NUMBER = 307;
    private int scrInletTemperature_;
    /**
     * <code>optional int32 scrInletTemperature = 307;</code>
     *
     * <pre>
     *SCR 入口温度
     * </pre>
     */
    public boolean hasScrInletTemperature() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 scrInletTemperature = 307;</code>
     *
     * <pre>
     *SCR 入口温度
     * </pre>
     */
    public int getScrInletTemperature() {
      return scrInletTemperature_;
    }

    // optional int32 scrOutletTemperature = 308;
    public static final int SCROUTLETTEMPERATURE_FIELD_NUMBER = 308;
    private int scrOutletTemperature_;
    /**
     * <code>optional int32 scrOutletTemperature = 308;</code>
     *
     * <pre>
     *SCR 出口温度
     * </pre>
     */
    public boolean hasScrOutletTemperature() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional int32 scrOutletTemperature = 308;</code>
     *
     * <pre>
     *SCR 出口温度
     * </pre>
     */
    public int getScrOutletTemperature() {
      return scrOutletTemperature_;
    }

    // optional int32 dpfDropoutVoltage = 309;
    public static final int DPFDROPOUTVOLTAGE_FIELD_NUMBER = 309;
    private int dpfDropoutVoltage_;
    /**
     * <code>optional int32 dpfDropoutVoltage = 309;</code>
     *
     * <pre>
     *DPF压差
     * </pre>
     */
    public boolean hasDpfDropoutVoltage() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 dpfDropoutVoltage = 309;</code>
     *
     * <pre>
     *DPF压差
     * </pre>
     */
    public int getDpfDropoutVoltage() {
      return dpfDropoutVoltage_;
    }

    // optional int32 engineCoolantTemperature = 310;
    public static final int ENGINECOOLANTTEMPERATURE_FIELD_NUMBER = 310;
    private int engineCoolantTemperature_;
    /**
     * <code>optional int32 engineCoolantTemperature = 310;</code>
     *
     * <pre>
     *发动机冷却液温度
     * </pre>
     */
    public boolean hasEngineCoolantTemperature() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional int32 engineCoolantTemperature = 310;</code>
     *
     * <pre>
     *发动机冷却液温度
     * </pre>
     */
    public int getEngineCoolantTemperature() {
      return engineCoolantTemperature_;
    }

    // optional int32 tankLevel = 311;
    public static final int TANKLEVEL_FIELD_NUMBER = 311;
    private int tankLevel_;
    /**
     * <code>optional int32 tankLevel = 311;</code>
     *
     * <pre>
     *油箱液位
     * </pre>
     */
    public boolean hasTankLevel() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional int32 tankLevel = 311;</code>
     *
     * <pre>
     *油箱液位
     * </pre>
     */
    public int getTankLevel() {
      return tankLevel_;
    }

    // optional int32 positioningState = 312;
    public static final int POSITIONINGSTATE_FIELD_NUMBER = 312;
    private int positioningState_;
    /**
     * <code>optional int32 positioningState = 312;</code>
     *
     * <pre>
     *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
     * </pre>
     */
    public boolean hasPositioningState() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 positioningState = 312;</code>
     *
     * <pre>
     *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
     * </pre>
     */
    public int getPositioningState() {
      return positioningState_;
    }

    // optional int64 mileage = 313;
    public static final int MILEAGE_FIELD_NUMBER = 313;
    private long mileage_;
    /**
     * <code>optional int64 mileage = 313;</code>
     *
     * <pre>
     *累计里程 CN6
     * </pre>
     */
    public boolean hasMileage() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 mileage = 313;</code>
     *
     * <pre>
     *累计里程 CN6
     * </pre>
     */
    public long getMileage() {
      return mileage_;
    }

    // optional string rValue = 314;
    public static final int RVALUE_FIELD_NUMBER = 314;
    private Object rValue_;
    /**
     * <code>optional string rValue = 314;</code>
     *
     * <pre>
     *16进制ASCII编码 R值
     * </pre>
     */
    public boolean hasRValue() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string rValue = 314;</code>
     *
     * <pre>
     *16进制ASCII编码 R值
     * </pre>
     */
    public String getRValue() {
      Object ref = rValue_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          rValue_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string rValue = 314;</code>
     *
     * <pre>
     *16进制ASCII编码 R值
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRValueBytes() {
      Object ref = rValue_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        rValue_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string sValue = 315;
    public static final int SVALUE_FIELD_NUMBER = 315;
    private Object sValue_;
    /**
     * <code>optional string sValue = 315;</code>
     *
     * <pre>
     *16进制ASCII编码 S值
     * </pre>
     */
    public boolean hasSValue() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string sValue = 315;</code>
     *
     * <pre>
     *16进制ASCII编码 S值
     * </pre>
     */
    public String getSValue() {
      Object ref = sValue_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          sValue_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string sValue = 315;</code>
     *
     * <pre>
     *16进制ASCII编码 S值
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSValueBytes() {
      Object ref = sValue_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sValue_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 commandUnit = 316;
    public static final int COMMANDUNIT_FIELD_NUMBER = 316;
    private int commandUnit_;
    /**
     * <code>optional int32 commandUnit = 316;</code>
     *
     * <pre>
     *命令单元
     * </pre>
     */
    public boolean hasCommandUnit() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 commandUnit = 316;</code>
     *
     * <pre>
     *命令单元
     * </pre>
     */
    public int getCommandUnit() {
      return commandUnit_;
    }

    // optional string vin = 317;
    public static final int VIN_FIELD_NUMBER = 317;
    private Object vin_;
    /**
     * <code>optional string vin = 317;</code>
     *
     * <pre>
     *车辆识别码
     * </pre>
     */
    public boolean hasVin() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string vin = 317;</code>
     *
     * <pre>
     *车辆识别码
     * </pre>
     */
    public String getVin() {
      Object ref = vin_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vin_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string vin = 317;</code>
     *
     * <pre>
     *车辆识别码
     * </pre>
     */
    public com.google.protobuf.ByteString
        getVinBytes() {
      Object ref = vin_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        vin_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 terminalVersion = 318;
    public static final int TERMINALVERSION_FIELD_NUMBER = 318;
    private int terminalVersion_;
    /**
     * <code>optional int32 terminalVersion = 318;</code>
     *
     * <pre>
     *终端软件版本号
     * </pre>
     */
    public boolean hasTerminalVersion() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 terminalVersion = 318;</code>
     *
     * <pre>
     *终端软件版本号
     * </pre>
     */
    public int getTerminalVersion() {
      return terminalVersion_;
    }

    // optional int32 encryption = 319;
    public static final int ENCRYPTION_FIELD_NUMBER = 319;
    private int encryption_;
    /**
     * <code>optional int32 encryption = 319;</code>
     *
     * <pre>
     *数据加密方式
     * </pre>
     */
    public boolean hasEncryption() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 encryption = 319;</code>
     *
     * <pre>
     *数据加密方式
     * </pre>
     */
    public int getEncryption() {
      return encryption_;
    }

    // optional int32 rLength = 320;
    public static final int RLENGTH_FIELD_NUMBER = 320;
    private int rLength_;
    /**
     * <code>optional int32 rLength = 320;</code>
     *
     * <pre>
     *R值 长度
     * </pre>
     */
    public boolean hasRLength() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 rLength = 320;</code>
     *
     * <pre>
     *R值 长度
     * </pre>
     */
    public int getRLength() {
      return rLength_;
    }

    // optional int32 sLength = 321;
    public static final int SLENGTH_FIELD_NUMBER = 321;
    private int sLength_;
    /**
     * <code>optional int32 sLength = 321;</code>
     *
     * <pre>
     *S值 长度
     * </pre>
     */
    public boolean hasSLength() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 sLength = 321;</code>
     *
     * <pre>
     *S值 长度
     * </pre>
     */
    public int getSLength() {
      return sLength_;
    }

    // optional int32 engineBrakingState = 405;
    public static final int ENGINEBRAKINGSTATE_FIELD_NUMBER = 405;
    private int engineBrakingState_;
    /**
     * <code>optional int32 engineBrakingState = 405;</code>
     *
     * <pre>
     *发动机制动状态
     * </pre>
     */
    public boolean hasEngineBrakingState() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 engineBrakingState = 405;</code>
     *
     * <pre>
     *发动机制动状态
     * </pre>
     */
    public int getEngineBrakingState() {
      return engineBrakingState_;
    }

    // optional int32 exhaustBrakingState = 410;
    public static final int EXHAUSTBRAKINGSTATE_FIELD_NUMBER = 410;
    private int exhaustBrakingState_;
    /**
     * <code>optional int32 exhaustBrakingState = 410;</code>
     *
     * <pre>
     *排气制动状态
     * </pre>
     */
    public boolean hasExhaustBrakingState() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 exhaustBrakingState = 410;</code>
     *
     * <pre>
     *排气制动状态
     * </pre>
     */
    public int getExhaustBrakingState() {
      return exhaustBrakingState_;
    }

    // optional int32 emptySignal = 415;
    public static final int EMPTYSIGNAL_FIELD_NUMBER = 415;
    private int emptySignal_;
    /**
     * <code>optional int32 emptySignal = 415;</code>
     *
     * <pre>
     *空挡信号
     * </pre>
     */
    public boolean hasEmptySignal() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 emptySignal = 415;</code>
     *
     * <pre>
     *空挡信号
     * </pre>
     */
    public int getEmptySignal() {
      return emptySignal_;
    }

    // optional int32 exhaustFlow = 420;
    public static final int EXHAUSTFLOW_FIELD_NUMBER = 420;
    private int exhaustFlow_;
    /**
     * <code>optional int32 exhaustFlow = 420;</code>
     *
     * <pre>
     *排气流量
     * </pre>
     */
    public boolean hasExhaustFlow() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 exhaustFlow = 420;</code>
     *
     * <pre>
     *排气流量
     * </pre>
     */
    public int getExhaustFlow() {
      return exhaustFlow_;
    }

    // optional int32 fanSpeed = 425;
    public static final int FANSPEED_FIELD_NUMBER = 425;
    private int fanSpeed_;
    /**
     * <code>optional int32 fanSpeed = 425;</code>
     *
     * <pre>
     *风扇转速
     * </pre>
     */
    public boolean hasFanSpeed() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 fanSpeed = 425;</code>
     *
     * <pre>
     *风扇转速
     * </pre>
     */
    public int getFanSpeed() {
      return fanSpeed_;
    }

    // optional int32 mechanicalBoxGear = 430;
    public static final int MECHANICALBOXGEAR_FIELD_NUMBER = 430;
    private int mechanicalBoxGear_;
    /**
     * <code>optional int32 mechanicalBoxGear = 430;</code>
     *
     * <pre>
     *档位（机械箱）
     * </pre>
     */
    public boolean hasMechanicalBoxGear() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 mechanicalBoxGear = 430;</code>
     *
     * <pre>
     *档位（机械箱）
     * </pre>
     */
    public int getMechanicalBoxGear() {
      return mechanicalBoxGear_;
    }

    // optional int32 instrumentSpeed = 435;
    public static final int INSTRUMENTSPEED_FIELD_NUMBER = 435;
    private int instrumentSpeed_;
    /**
     * <code>optional int32 instrumentSpeed = 435;</code>
     *
     * <pre>
     *仪表车速
     * </pre>
     */
    public boolean hasInstrumentSpeed() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 instrumentSpeed = 435;</code>
     *
     * <pre>
     *仪表车速
     * </pre>
     */
    public int getInstrumentSpeed() {
      return instrumentSpeed_;
    }

    // optional int32 wheelSpeed = 436;
    public static final int WHEELSPEED_FIELD_NUMBER = 436;
    private int wheelSpeed_;
    /**
     * <code>optional int32 wheelSpeed = 436;</code>
     *
     * <pre>
     *车轮车速
     * </pre>
     */
    public boolean hasWheelSpeed() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 wheelSpeed = 436;</code>
     *
     * <pre>
     *车轮车速
     * </pre>
     */
    public int getWheelSpeed() {
      return wheelSpeed_;
    }

    // optional int32 parkingBrakeSwitch = 437;
    public static final int PARKINGBRAKESWITCH_FIELD_NUMBER = 437;
    private int parkingBrakeSwitch_;
    /**
     * <code>optional int32 parkingBrakeSwitch = 437;</code>
     *
     * <pre>
     *驻车制动开关
     * </pre>
     */
    public boolean hasParkingBrakeSwitch() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 parkingBrakeSwitch = 437;</code>
     *
     * <pre>
     *驻车制动开关
     * </pre>
     */
    public int getParkingBrakeSwitch() {
      return parkingBrakeSwitch_;
    }

    // optional int32 cruiseControlSettingSwitch = 438;
    public static final int CRUISECONTROLSETTINGSWITCH_FIELD_NUMBER = 438;
    private int cruiseControlSettingSwitch_;
    /**
     * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
     *
     * <pre>
     *巡航控制设置开关
     * </pre>
     */
    public boolean hasCruiseControlSettingSwitch() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
     *
     * <pre>
     *巡航控制设置开关
     * </pre>
     */
    public int getCruiseControlSettingSwitch() {
      return cruiseControlSettingSwitch_;
    }

    // optional int32 targetGear = 439;
    public static final int TARGETGEAR_FIELD_NUMBER = 439;
    private int targetGear_;
    /**
     * <code>optional int32 targetGear = 439;</code>
     *
     * <pre>
     *目标档位
     * </pre>
     */
    public boolean hasTargetGear() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 targetGear = 439;</code>
     *
     * <pre>
     *目标档位
     * </pre>
     */
    public int getTargetGear() {
      return targetGear_;
    }

    // optional int32 slope = 440;
    public static final int SLOPE_FIELD_NUMBER = 440;
    private int slope_;
    /**
     * <code>optional int32 slope = 440;</code>
     *
     * <pre>
     *坡度
     * </pre>
     */
    public boolean hasSlope() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional int32 slope = 440;</code>
     *
     * <pre>
     *坡度
     * </pre>
     */
    public int getSlope() {
      return slope_;
    }

    // optional int32 load = 441;
    public static final int LOAD_FIELD_NUMBER = 441;
    private int load_;
    /**
     * <code>optional int32 load = 441;</code>
     *
     * <pre>
     *载重
     * </pre>
     */
    public boolean hasLoad() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional int32 load = 441;</code>
     *
     * <pre>
     *载重
     * </pre>
     */
    public int getLoad() {
      return load_;
    }

    // optional int32 fuelLevel = 442;
    public static final int FUELLEVEL_FIELD_NUMBER = 442;
    private int fuelLevel_;
    /**
     * <code>optional int32 fuelLevel = 442;</code>
     *
     * <pre>
     *燃油液位
     * </pre>
     */
    public boolean hasFuelLevel() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 fuelLevel = 442;</code>
     *
     * <pre>
     *燃油液位
     * </pre>
     */
    public int getFuelLevel() {
      return fuelLevel_;
    }

    // optional int32 waterTemperature = 443;
    public static final int WATERTEMPERATURE_FIELD_NUMBER = 443;
    private int waterTemperature_;
    /**
     * <code>optional int32 waterTemperature = 443;</code>
     *
     * <pre>
     *水温
     * </pre>
     */
    public boolean hasWaterTemperature() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 waterTemperature = 443;</code>
     *
     * <pre>
     *水温
     * </pre>
     */
    public int getWaterTemperature() {
      return waterTemperature_;
    }

    // optional int32 atmosphericPressure = 444;
    public static final int ATMOSPHERICPRESSURE_FIELD_NUMBER = 444;
    private int atmosphericPressure_;
    /**
     * <code>optional int32 atmosphericPressure = 444;</code>
     *
     * <pre>
     *大气压力
     * </pre>
     */
    public boolean hasAtmosphericPressure() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 atmosphericPressure = 444;</code>
     *
     * <pre>
     *大气压力
     * </pre>
     */
    public int getAtmosphericPressure() {
      return atmosphericPressure_;
    }

    // optional int32 intakeAirTemperature = 445;
    public static final int INTAKEAIRTEMPERATURE_FIELD_NUMBER = 445;
    private int intakeAirTemperature_;
    /**
     * <code>optional int32 intakeAirTemperature = 445;</code>
     *
     * <pre>
     *进气温度
     * </pre>
     */
    public boolean hasIntakeAirTemperature() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 intakeAirTemperature = 445;</code>
     *
     * <pre>
     *进气温度
     * </pre>
     */
    public int getIntakeAirTemperature() {
      return intakeAirTemperature_;
    }

    // optional int32 atmosphericTemperature = 446;
    public static final int ATMOSPHERICTEMPERATURE_FIELD_NUMBER = 446;
    private int atmosphericTemperature_;
    /**
     * <code>optional int32 atmosphericTemperature = 446;</code>
     *
     * <pre>
     *大气温度
     * </pre>
     */
    public boolean hasAtmosphericTemperature() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 atmosphericTemperature = 446;</code>
     *
     * <pre>
     *大气温度
     * </pre>
     */
    public int getAtmosphericTemperature() {
      return atmosphericTemperature_;
    }

    // optional int32 exhaustGasTemperature = 447;
    public static final int EXHAUSTGASTEMPERATURE_FIELD_NUMBER = 447;
    private int exhaustGasTemperature_;
    /**
     * <code>optional int32 exhaustGasTemperature = 447;</code>
     *
     * <pre>
     *排气温度
     * </pre>
     */
    public boolean hasExhaustGasTemperature() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional int32 exhaustGasTemperature = 447;</code>
     *
     * <pre>
     *排气温度
     * </pre>
     */
    public int getExhaustGasTemperature() {
      return exhaustGasTemperature_;
    }

    // optional int32 intakeManifoldBoostPressure = 448;
    public static final int INTAKEMANIFOLDBOOSTPRESSURE_FIELD_NUMBER = 448;
    private int intakeManifoldBoostPressure_;
    /**
     * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
     *
     * <pre>
     *进气歧管增压压力
     * </pre>
     */
    public boolean hasIntakeManifoldBoostPressure() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
     *
     * <pre>
     *进气歧管增压压力
     * </pre>
     */
    public int getIntakeManifoldBoostPressure() {
      return intakeManifoldBoostPressure_;
    }

    // optional int32 relativePressure = 449;
    public static final int RELATIVEPRESSURE_FIELD_NUMBER = 449;
    private int relativePressure_;
    /**
     * <code>optional int32 relativePressure = 449;</code>
     *
     * <pre>
     *相对压力
     * </pre>
     */
    public boolean hasRelativePressure() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional int32 relativePressure = 449;</code>
     *
     * <pre>
     *相对压力
     * </pre>
     */
    public int getRelativePressure() {
      return relativePressure_;
    }

    // optional int32 engineTorqueMode = 450;
    public static final int ENGINETORQUEMODE_FIELD_NUMBER = 450;
    private int engineTorqueMode_;
    /**
     * <code>optional int32 engineTorqueMode = 450;</code>
     *
     * <pre>
     *发动机扭矩模式
     * </pre>
     */
    public boolean hasEngineTorqueMode() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional int32 engineTorqueMode = 450;</code>
     *
     * <pre>
     *发动机扭矩模式
     * </pre>
     */
    public int getEngineTorqueMode() {
      return engineTorqueMode_;
    }

    // optional int32 oilPressure = 451;
    public static final int OILPRESSURE_FIELD_NUMBER = 451;
    private int oilPressure_;
    /**
     * <code>optional int32 oilPressure = 451;</code>
     *
     * <pre>
     *机油压力
     * </pre>
     */
    public boolean hasOilPressure() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 oilPressure = 451;</code>
     *
     * <pre>
     *机油压力
     * </pre>
     */
    public int getOilPressure() {
      return oilPressure_;
    }

    // optional int32 ureaLevel = 452;
    public static final int UREALEVEL_FIELD_NUMBER = 452;
    private int ureaLevel_;
    /**
     * <code>optional int32 ureaLevel = 452;</code>
     *
     * <pre>
     *尿素液位
     * </pre>
     */
    public boolean hasUreaLevel() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 ureaLevel = 452;</code>
     *
     * <pre>
     *尿素液位
     * </pre>
     */
    public int getUreaLevel() {
      return ureaLevel_;
    }

    // optional int64 statusFlag = 453;
    public static final int STATUSFLAG_FIELD_NUMBER = 453;
    private long statusFlag_;
    /**
     * <code>optional int64 statusFlag = 453;</code>
     *
     * <pre>
     *状态标志位
     * </pre>
     */
    public boolean hasStatusFlag() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 statusFlag = 453;</code>
     *
     * <pre>
     *状态标志位
     * </pre>
     */
    public long getStatusFlag() {
      return statusFlag_;
    }

    // optional int32 brakeRate = 454;
    public static final int BRAKERATE_FIELD_NUMBER = 454;
    private int brakeRate_;
    /**
     * <code>optional int32 brakeRate = 454;</code>
     *
     * <pre>
     *制动踏板开度
     * </pre>
     */
    public boolean hasBrakeRate() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 brakeRate = 454;</code>
     *
     * <pre>
     *制动踏板开度
     * </pre>
     */
    public int getBrakeRate() {
      return brakeRate_;
    }

    // optional int32 gpsDirection = 455;
    public static final int GPSDIRECTION_FIELD_NUMBER = 455;
    private int gpsDirection_;
    /**
     * <code>optional int32 gpsDirection = 455;</code>
     *
     * <pre>
     *GSP方向
     * </pre>
     */
    public boolean hasGpsDirection() {
      return ((bitField2_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 gpsDirection = 455;</code>
     *
     * <pre>
     *GSP方向
     * </pre>
     */
    public int getGpsDirection() {
      return gpsDirection_;
    }

    // optional int32 airConditionStatus = 456;
    public static final int AIRCONDITIONSTATUS_FIELD_NUMBER = 456;
    private int airConditionStatus_;
    /**
     * <code>optional int32 airConditionStatus = 456;</code>
     *
     * <pre>
     *空调压缩机状态
     * </pre>
     */
    public boolean hasAirConditionStatus() {
      return ((bitField2_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 airConditionStatus = 456;</code>
     *
     * <pre>
     *空调压缩机状态
     * </pre>
     */
    public int getAirConditionStatus() {
      return airConditionStatus_;
    }

    // optional int32 transmissionRotation = 457;
    public static final int TRANSMISSIONROTATION_FIELD_NUMBER = 457;
    private int transmissionRotation_;
    /**
     * <code>optional int32 transmissionRotation = 457;</code>
     *
     * <pre>
     *变速箱转速
     * </pre>
     */
    public boolean hasTransmissionRotation() {
      return ((bitField2_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 transmissionRotation = 457;</code>
     *
     * <pre>
     *变速箱转速
     * </pre>
     */
    public int getTransmissionRotation() {
      return transmissionRotation_;
    }

    // optional string part_time = 5000;
    public static final int PART_TIME_FIELD_NUMBER = 5000;
    private Object partTime_;
    /**
     * <code>optional string part_time = 5000;</code>
     *
     * <pre>
     *这里主要给落入hdfs的数据做分区用，加字段请在上面加
     * </pre>
     */
    public boolean hasPartTime() {
      return ((bitField2_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string part_time = 5000;</code>
     *
     * <pre>
     *这里主要给落入hdfs的数据做分区用，加字段请在上面加
     * </pre>
     */
    public String getPartTime() {
      Object ref = partTime_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          partTime_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string part_time = 5000;</code>
     *
     * <pre>
     *这里主要给落入hdfs的数据做分区用，加字段请在上面加
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPartTimeBytes() {
      Object ref = partTime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        partTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      gpsTime_ = 0L;
      latitude_ = 0;
      longitude_ = 0;
      height_ = 0;
      engineOutputTorque_ = 0;
      speed_ = 0;
      accelerator_ = 0;
      brake_ = 0;
      rotation_ = 0;
      gear_ = 0;
      clutchSwitch_ = 0;
      realTimeOilConsumption_ = 0;
      fuelConsumptionRate_ = 0;
      retransmissionPackets_ = 0;
      terminalId_ = 0L;
      serialNumber_ = 0L;
      receiveDate_ = 0L;
      originalLat_ = 0;
      originalLng_ = 0;
      protocolType_ = 0;
      vehicleSpeed_ = 0;
      barometricPressure_ = 0;
      frictionTorque_ = 0;
      scrUpStreamNOxSensorOutput_ = 0;
      scrDownStreamNOxSensorOutput_ = 0;
      reagentAllowance_ = 0;
      airInflow_ = 0;
      scrInletTemperature_ = 0;
      scrOutletTemperature_ = 0;
      dpfDropoutVoltage_ = 0;
      engineCoolantTemperature_ = 0;
      tankLevel_ = 0;
      positioningState_ = 0;
      mileage_ = 0L;
      rValue_ = "";
      sValue_ = "";
      commandUnit_ = 0;
      vin_ = "";
      terminalVersion_ = 0;
      encryption_ = 0;
      rLength_ = 0;
      sLength_ = 0;
      engineBrakingState_ = 0;
      exhaustBrakingState_ = 0;
      emptySignal_ = 0;
      exhaustFlow_ = 0;
      fanSpeed_ = 0;
      mechanicalBoxGear_ = 0;
      instrumentSpeed_ = 0;
      wheelSpeed_ = 0;
      parkingBrakeSwitch_ = 0;
      cruiseControlSettingSwitch_ = 0;
      targetGear_ = 0;
      slope_ = 0;
      load_ = 0;
      fuelLevel_ = 0;
      waterTemperature_ = 0;
      atmosphericPressure_ = 0;
      intakeAirTemperature_ = 0;
      atmosphericTemperature_ = 0;
      exhaustGasTemperature_ = 0;
      intakeManifoldBoostPressure_ = 0;
      relativePressure_ = 0;
      engineTorqueMode_ = 0;
      oilPressure_ = 0;
      ureaLevel_ = 0;
      statusFlag_ = 0L;
      brakeRate_ = 0;
      gpsDirection_ = 0;
      airConditionStatus_ = 0;
      transmissionRotation_ = 0;
      partTime_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGpsTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, gpsTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, longitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, height_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, engineOutputTorque_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, speed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, accelerator_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, brake_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, rotation_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, gear_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, clutchSwitch_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, realTimeOilConsumption_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, fuelConsumptionRate_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(38, retransmissionPackets_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt64(50, terminalId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt64(100, serialNumber_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt64(110, receiveDate_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(120, originalLat_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(130, originalLng_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(220, protocolType_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(300, vehicleSpeed_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(301, barometricPressure_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(302, frictionTorque_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(303, scrUpStreamNOxSensorOutput_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(304, scrDownStreamNOxSensorOutput_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(305, reagentAllowance_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(306, airInflow_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(307, scrInletTemperature_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(308, scrOutletTemperature_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(309, dpfDropoutVoltage_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(310, engineCoolantTemperature_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(311, tankLevel_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(312, positioningState_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(313, mileage_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(314, getRValueBytes());
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(315, getSValueBytes());
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(316, commandUnit_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(317, getVinBytes());
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(318, terminalVersion_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(319, encryption_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(320, rLength_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(321, sLength_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(405, engineBrakingState_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(410, exhaustBrakingState_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(415, emptySignal_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(420, exhaustFlow_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(425, fanSpeed_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(430, mechanicalBoxGear_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(435, instrumentSpeed_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(436, wheelSpeed_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(437, parkingBrakeSwitch_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(438, cruiseControlSettingSwitch_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(439, targetGear_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(440, slope_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(441, load_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(442, fuelLevel_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(443, waterTemperature_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(444, atmosphericPressure_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(445, intakeAirTemperature_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(446, atmosphericTemperature_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(447, exhaustGasTemperature_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(448, intakeManifoldBoostPressure_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(449, relativePressure_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(450, engineTorqueMode_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(451, oilPressure_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(452, ureaLevel_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(453, statusFlag_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(454, brakeRate_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(455, gpsDirection_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(456, airConditionStatus_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(457, transmissionRotation_);
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(5000, getPartTimeBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, gpsTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, longitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, height_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, engineOutputTorque_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, speed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, accelerator_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, brake_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, rotation_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, gear_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, clutchSwitch_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, realTimeOilConsumption_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, fuelConsumptionRate_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(38, retransmissionPackets_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(50, terminalId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(100, serialNumber_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(110, receiveDate_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(120, originalLat_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(130, originalLng_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(220, protocolType_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(300, vehicleSpeed_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(301, barometricPressure_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(302, frictionTorque_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(303, scrUpStreamNOxSensorOutput_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(304, scrDownStreamNOxSensorOutput_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(305, reagentAllowance_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(306, airInflow_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(307, scrInletTemperature_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(308, scrOutletTemperature_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(309, dpfDropoutVoltage_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(310, engineCoolantTemperature_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(311, tankLevel_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(312, positioningState_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(313, mileage_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(314, getRValueBytes());
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(315, getSValueBytes());
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(316, commandUnit_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(317, getVinBytes());
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(318, terminalVersion_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(319, encryption_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(320, rLength_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(321, sLength_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(405, engineBrakingState_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(410, exhaustBrakingState_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(415, emptySignal_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(420, exhaustFlow_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(425, fanSpeed_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(430, mechanicalBoxGear_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(435, instrumentSpeed_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(436, wheelSpeed_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(437, parkingBrakeSwitch_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(438, cruiseControlSettingSwitch_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(439, targetGear_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(440, slope_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(441, load_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(442, fuelLevel_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(443, waterTemperature_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(444, atmosphericPressure_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(445, intakeAirTemperature_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(446, atmosphericTemperature_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(447, exhaustGasTemperature_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(448, intakeManifoldBoostPressure_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(449, relativePressure_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(450, engineTorqueMode_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(451, oilPressure_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(452, ureaLevel_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(453, statusFlag_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(454, brakeRate_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(455, gpsDirection_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(456, airConditionStatus_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(457, transmissionRotation_);
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5000, getPartTimeBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RealTimeData}
     *
     * <pre>
     *密集数据上报模型
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return internal_static_RealTimeData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return internal_static_RealTimeData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData.class, com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData.Builder.class);
      }

      // Construct using com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gpsTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        engineOutputTorque_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        speed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        accelerator_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        brake_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        rotation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        gear_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        clutchSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        realTimeOilConsumption_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        fuelConsumptionRate_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        retransmissionPackets_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        terminalId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        serialNumber_ = 0L;
        bitField0_ = (bitField0_ & ~0x00008000);
        receiveDate_ = 0L;
        bitField0_ = (bitField0_ & ~0x00010000);
        originalLat_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        originalLng_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        protocolType_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        vehicleSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        barometricPressure_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        frictionTorque_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        scrUpStreamNOxSensorOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        scrDownStreamNOxSensorOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        reagentAllowance_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        airInflow_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        scrInletTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        scrOutletTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        dpfDropoutVoltage_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        engineCoolantTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        tankLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        positioningState_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        mileage_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000002);
        rValue_ = "";
        bitField1_ = (bitField1_ & ~0x00000004);
        sValue_ = "";
        bitField1_ = (bitField1_ & ~0x00000008);
        commandUnit_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        vin_ = "";
        bitField1_ = (bitField1_ & ~0x00000020);
        terminalVersion_ = 0;
        bitField1_ = (bitField1_ & ~0x00000040);
        encryption_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        rLength_ = 0;
        bitField1_ = (bitField1_ & ~0x00000100);
        sLength_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        engineBrakingState_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        exhaustBrakingState_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        emptySignal_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        exhaustFlow_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        fanSpeed_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        mechanicalBoxGear_ = 0;
        bitField1_ = (bitField1_ & ~0x00008000);
        instrumentSpeed_ = 0;
        bitField1_ = (bitField1_ & ~0x00010000);
        wheelSpeed_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        parkingBrakeSwitch_ = 0;
        bitField1_ = (bitField1_ & ~0x00040000);
        cruiseControlSettingSwitch_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        targetGear_ = 0;
        bitField1_ = (bitField1_ & ~0x00100000);
        slope_ = 0;
        bitField1_ = (bitField1_ & ~0x00200000);
        load_ = 0;
        bitField1_ = (bitField1_ & ~0x00400000);
        fuelLevel_ = 0;
        bitField1_ = (bitField1_ & ~0x00800000);
        waterTemperature_ = 0;
        bitField1_ = (bitField1_ & ~0x01000000);
        atmosphericPressure_ = 0;
        bitField1_ = (bitField1_ & ~0x02000000);
        intakeAirTemperature_ = 0;
        bitField1_ = (bitField1_ & ~0x04000000);
        atmosphericTemperature_ = 0;
        bitField1_ = (bitField1_ & ~0x08000000);
        exhaustGasTemperature_ = 0;
        bitField1_ = (bitField1_ & ~0x10000000);
        intakeManifoldBoostPressure_ = 0;
        bitField1_ = (bitField1_ & ~0x20000000);
        relativePressure_ = 0;
        bitField1_ = (bitField1_ & ~0x40000000);
        engineTorqueMode_ = 0;
        bitField1_ = (bitField1_ & ~0x80000000);
        oilPressure_ = 0;
        bitField2_ = (bitField2_ & ~0x00000001);
        ureaLevel_ = 0;
        bitField2_ = (bitField2_ & ~0x00000002);
        statusFlag_ = 0L;
        bitField2_ = (bitField2_ & ~0x00000004);
        brakeRate_ = 0;
        bitField2_ = (bitField2_ & ~0x00000008);
        gpsDirection_ = 0;
        bitField2_ = (bitField2_ & ~0x00000010);
        airConditionStatus_ = 0;
        bitField2_ = (bitField2_ & ~0x00000020);
        transmissionRotation_ = 0;
        bitField2_ = (bitField2_ & ~0x00000040);
        partTime_ = "";
        bitField2_ = (bitField2_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return internal_static_RealTimeData_descriptor;
      }

      public com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData getDefaultInstanceForType() {
        return getDefaultInstance();
      }

      public com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData build() {
        com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData buildPartial() {
        com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData result = new com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gpsTime_ = gpsTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.engineOutputTorque_ = engineOutputTorque_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.speed_ = speed_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.accelerator_ = accelerator_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.brake_ = brake_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.rotation_ = rotation_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.gear_ = gear_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.clutchSwitch_ = clutchSwitch_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.realTimeOilConsumption_ = realTimeOilConsumption_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.fuelConsumptionRate_ = fuelConsumptionRate_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.retransmissionPackets_ = retransmissionPackets_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.terminalId_ = terminalId_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.serialNumber_ = serialNumber_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.receiveDate_ = receiveDate_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.originalLat_ = originalLat_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.originalLng_ = originalLng_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.protocolType_ = protocolType_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.vehicleSpeed_ = vehicleSpeed_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.barometricPressure_ = barometricPressure_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.frictionTorque_ = frictionTorque_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.scrUpStreamNOxSensorOutput_ = scrUpStreamNOxSensorOutput_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.scrDownStreamNOxSensorOutput_ = scrDownStreamNOxSensorOutput_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.reagentAllowance_ = reagentAllowance_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.airInflow_ = airInflow_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.scrInletTemperature_ = scrInletTemperature_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.scrOutletTemperature_ = scrOutletTemperature_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.dpfDropoutVoltage_ = dpfDropoutVoltage_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.engineCoolantTemperature_ = engineCoolantTemperature_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.tankLevel_ = tankLevel_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.positioningState_ = positioningState_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.mileage_ = mileage_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.rValue_ = rValue_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.sValue_ = sValue_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.commandUnit_ = commandUnit_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.vin_ = vin_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.terminalVersion_ = terminalVersion_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.encryption_ = encryption_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.rLength_ = rLength_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.sLength_ = sLength_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.engineBrakingState_ = engineBrakingState_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.exhaustBrakingState_ = exhaustBrakingState_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.emptySignal_ = emptySignal_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.exhaustFlow_ = exhaustFlow_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.fanSpeed_ = fanSpeed_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.mechanicalBoxGear_ = mechanicalBoxGear_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.instrumentSpeed_ = instrumentSpeed_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.wheelSpeed_ = wheelSpeed_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.parkingBrakeSwitch_ = parkingBrakeSwitch_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.cruiseControlSettingSwitch_ = cruiseControlSettingSwitch_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.targetGear_ = targetGear_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.slope_ = slope_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.load_ = load_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.fuelLevel_ = fuelLevel_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.waterTemperature_ = waterTemperature_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.atmosphericPressure_ = atmosphericPressure_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.intakeAirTemperature_ = intakeAirTemperature_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.atmosphericTemperature_ = atmosphericTemperature_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.exhaustGasTemperature_ = exhaustGasTemperature_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.intakeManifoldBoostPressure_ = intakeManifoldBoostPressure_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.relativePressure_ = relativePressure_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.engineTorqueMode_ = engineTorqueMode_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.oilPressure_ = oilPressure_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.ureaLevel_ = ureaLevel_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField2_ |= 0x00000004;
        }
        result.statusFlag_ = statusFlag_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000008;
        }
        result.brakeRate_ = brakeRate_;
        if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
          to_bitField2_ |= 0x00000010;
        }
        result.gpsDirection_ = gpsDirection_;
        if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
          to_bitField2_ |= 0x00000020;
        }
        result.airConditionStatus_ = airConditionStatus_;
        if (((from_bitField2_ & 0x00000040) == 0x00000040)) {
          to_bitField2_ |= 0x00000040;
        }
        result.transmissionRotation_ = transmissionRotation_;
        if (((from_bitField2_ & 0x00000080) == 0x00000080)) {
          to_bitField2_ |= 0x00000080;
        }
        result.partTime_ = partTime_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData) {
          return mergeFrom((com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData other) {
        if (other == getDefaultInstance()) return this;
        if (other.hasGpsTime()) {
          setGpsTime(other.getGpsTime());
        }
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasEngineOutputTorque()) {
          setEngineOutputTorque(other.getEngineOutputTorque());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        if (other.hasAccelerator()) {
          setAccelerator(other.getAccelerator());
        }
        if (other.hasBrake()) {
          setBrake(other.getBrake());
        }
        if (other.hasRotation()) {
          setRotation(other.getRotation());
        }
        if (other.hasGear()) {
          setGear(other.getGear());
        }
        if (other.hasClutchSwitch()) {
          setClutchSwitch(other.getClutchSwitch());
        }
        if (other.hasRealTimeOilConsumption()) {
          setRealTimeOilConsumption(other.getRealTimeOilConsumption());
        }
        if (other.hasFuelConsumptionRate()) {
          setFuelConsumptionRate(other.getFuelConsumptionRate());
        }
        if (other.hasRetransmissionPackets()) {
          setRetransmissionPackets(other.getRetransmissionPackets());
        }
        if (other.hasTerminalId()) {
          setTerminalId(other.getTerminalId());
        }
        if (other.hasSerialNumber()) {
          setSerialNumber(other.getSerialNumber());
        }
        if (other.hasReceiveDate()) {
          setReceiveDate(other.getReceiveDate());
        }
        if (other.hasOriginalLat()) {
          setOriginalLat(other.getOriginalLat());
        }
        if (other.hasOriginalLng()) {
          setOriginalLng(other.getOriginalLng());
        }
        if (other.hasProtocolType()) {
          setProtocolType(other.getProtocolType());
        }
        if (other.hasVehicleSpeed()) {
          setVehicleSpeed(other.getVehicleSpeed());
        }
        if (other.hasBarometricPressure()) {
          setBarometricPressure(other.getBarometricPressure());
        }
        if (other.hasFrictionTorque()) {
          setFrictionTorque(other.getFrictionTorque());
        }
        if (other.hasScrUpStreamNOxSensorOutput()) {
          setScrUpStreamNOxSensorOutput(other.getScrUpStreamNOxSensorOutput());
        }
        if (other.hasScrDownStreamNOxSensorOutput()) {
          setScrDownStreamNOxSensorOutput(other.getScrDownStreamNOxSensorOutput());
        }
        if (other.hasReagentAllowance()) {
          setReagentAllowance(other.getReagentAllowance());
        }
        if (other.hasAirInflow()) {
          setAirInflow(other.getAirInflow());
        }
        if (other.hasScrInletTemperature()) {
          setScrInletTemperature(other.getScrInletTemperature());
        }
        if (other.hasScrOutletTemperature()) {
          setScrOutletTemperature(other.getScrOutletTemperature());
        }
        if (other.hasDpfDropoutVoltage()) {
          setDpfDropoutVoltage(other.getDpfDropoutVoltage());
        }
        if (other.hasEngineCoolantTemperature()) {
          setEngineCoolantTemperature(other.getEngineCoolantTemperature());
        }
        if (other.hasTankLevel()) {
          setTankLevel(other.getTankLevel());
        }
        if (other.hasPositioningState()) {
          setPositioningState(other.getPositioningState());
        }
        if (other.hasMileage()) {
          setMileage(other.getMileage());
        }
        if (other.hasRValue()) {
          bitField1_ |= 0x00000004;
          rValue_ = other.rValue_;
          onChanged();
        }
        if (other.hasSValue()) {
          bitField1_ |= 0x00000008;
          sValue_ = other.sValue_;
          onChanged();
        }
        if (other.hasCommandUnit()) {
          setCommandUnit(other.getCommandUnit());
        }
        if (other.hasVin()) {
          bitField1_ |= 0x00000020;
          vin_ = other.vin_;
          onChanged();
        }
        if (other.hasTerminalVersion()) {
          setTerminalVersion(other.getTerminalVersion());
        }
        if (other.hasEncryption()) {
          setEncryption(other.getEncryption());
        }
        if (other.hasRLength()) {
          setRLength(other.getRLength());
        }
        if (other.hasSLength()) {
          setSLength(other.getSLength());
        }
        if (other.hasEngineBrakingState()) {
          setEngineBrakingState(other.getEngineBrakingState());
        }
        if (other.hasExhaustBrakingState()) {
          setExhaustBrakingState(other.getExhaustBrakingState());
        }
        if (other.hasEmptySignal()) {
          setEmptySignal(other.getEmptySignal());
        }
        if (other.hasExhaustFlow()) {
          setExhaustFlow(other.getExhaustFlow());
        }
        if (other.hasFanSpeed()) {
          setFanSpeed(other.getFanSpeed());
        }
        if (other.hasMechanicalBoxGear()) {
          setMechanicalBoxGear(other.getMechanicalBoxGear());
        }
        if (other.hasInstrumentSpeed()) {
          setInstrumentSpeed(other.getInstrumentSpeed());
        }
        if (other.hasWheelSpeed()) {
          setWheelSpeed(other.getWheelSpeed());
        }
        if (other.hasParkingBrakeSwitch()) {
          setParkingBrakeSwitch(other.getParkingBrakeSwitch());
        }
        if (other.hasCruiseControlSettingSwitch()) {
          setCruiseControlSettingSwitch(other.getCruiseControlSettingSwitch());
        }
        if (other.hasTargetGear()) {
          setTargetGear(other.getTargetGear());
        }
        if (other.hasSlope()) {
          setSlope(other.getSlope());
        }
        if (other.hasLoad()) {
          setLoad(other.getLoad());
        }
        if (other.hasFuelLevel()) {
          setFuelLevel(other.getFuelLevel());
        }
        if (other.hasWaterTemperature()) {
          setWaterTemperature(other.getWaterTemperature());
        }
        if (other.hasAtmosphericPressure()) {
          setAtmosphericPressure(other.getAtmosphericPressure());
        }
        if (other.hasIntakeAirTemperature()) {
          setIntakeAirTemperature(other.getIntakeAirTemperature());
        }
        if (other.hasAtmosphericTemperature()) {
          setAtmosphericTemperature(other.getAtmosphericTemperature());
        }
        if (other.hasExhaustGasTemperature()) {
          setExhaustGasTemperature(other.getExhaustGasTemperature());
        }
        if (other.hasIntakeManifoldBoostPressure()) {
          setIntakeManifoldBoostPressure(other.getIntakeManifoldBoostPressure());
        }
        if (other.hasRelativePressure()) {
          setRelativePressure(other.getRelativePressure());
        }
        if (other.hasEngineTorqueMode()) {
          setEngineTorqueMode(other.getEngineTorqueMode());
        }
        if (other.hasOilPressure()) {
          setOilPressure(other.getOilPressure());
        }
        if (other.hasUreaLevel()) {
          setUreaLevel(other.getUreaLevel());
        }
        if (other.hasStatusFlag()) {
          setStatusFlag(other.getStatusFlag());
        }
        if (other.hasBrakeRate()) {
          setBrakeRate(other.getBrakeRate());
        }
        if (other.hasGpsDirection()) {
          setGpsDirection(other.getGpsDirection());
        }
        if (other.hasAirConditionStatus()) {
          setAirConditionStatus(other.getAirConditionStatus());
        }
        if (other.hasTransmissionRotation()) {
          setTransmissionRotation(other.getTransmissionRotation());
        }
        if (other.hasPartTime()) {
          bitField2_ |= 0x00000080;
          partTime_ = other.partTime_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGpsTime()) {

          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.navinfo.stream.qingqi.protocol.java.RealTimeDataPb.RealTimeData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;

      // required int64 gpsTime = 1;
      private long gpsTime_ ;
      /**
       * <code>required int64 gpsTime = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public boolean hasGpsTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 gpsTime = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public long getGpsTime() {
        return gpsTime_;
      }
      /**
       * <code>required int64 gpsTime = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder setGpsTime(long value) {
        bitField0_ |= 0x00000001;
        gpsTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 gpsTime = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder clearGpsTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gpsTime_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 latitude = 2;
      private int latitude_ ;
      /**
       * <code>optional int32 latitude = 2;</code>
       *
       * <pre>
       *纬度
       * </pre>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 latitude = 2;</code>
       *
       * <pre>
       *纬度
       * </pre>
       */
      public int getLatitude() {
        return latitude_;
      }
      /**
       * <code>optional int32 latitude = 2;</code>
       *
       * <pre>
       *纬度
       * </pre>
       */
      public Builder setLatitude(int value) {
        bitField0_ |= 0x00000002;
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 latitude = 2;</code>
       *
       * <pre>
       *纬度
       * </pre>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        latitude_ = 0;
        onChanged();
        return this;
      }

      // optional int32 longitude = 3;
      private int longitude_ ;
      /**
       * <code>optional int32 longitude = 3;</code>
       *
       * <pre>
       *经度
       * </pre>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 longitude = 3;</code>
       *
       * <pre>
       *经度
       * </pre>
       */
      public int getLongitude() {
        return longitude_;
      }
      /**
       * <code>optional int32 longitude = 3;</code>
       *
       * <pre>
       *经度
       * </pre>
       */
      public Builder setLongitude(int value) {
        bitField0_ |= 0x00000004;
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 longitude = 3;</code>
       *
       * <pre>
       *经度
       * </pre>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        longitude_ = 0;
        onChanged();
        return this;
      }

      // optional int32 height = 4;
      private int height_ ;
      /**
       * <code>optional int32 height = 4;</code>
       *
       * <pre>
       *高程
       * </pre>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 height = 4;</code>
       *
       * <pre>
       *高程
       * </pre>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 4;</code>
       *
       * <pre>
       *高程
       * </pre>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000008;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 4;</code>
       *
       * <pre>
       *高程
       * </pre>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = 0;
        onChanged();
        return this;
      }

      // optional int32 engineOutputTorque = 5;
      private int engineOutputTorque_ ;
      /**
       * <code>optional int32 engineOutputTorque = 5;</code>
       *
       * <pre>
       *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
       * </pre>
       */
      public boolean hasEngineOutputTorque() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 engineOutputTorque = 5;</code>
       *
       * <pre>
       *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
       * </pre>
       */
      public int getEngineOutputTorque() {
        return engineOutputTorque_;
      }
      /**
       * <code>optional int32 engineOutputTorque = 5;</code>
       *
       * <pre>
       *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
       * </pre>
       */
      public Builder setEngineOutputTorque(int value) {
        bitField0_ |= 0x00000010;
        engineOutputTorque_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 engineOutputTorque = 5;</code>
       *
       * <pre>
       *发动机实际输出扭矩百分比 或 CN6 发动机净输出扭矩
       * </pre>
       */
      public Builder clearEngineOutputTorque() {
        bitField0_ = (bitField0_ & ~0x00000010);
        engineOutputTorque_ = 0;
        onChanged();
        return this;
      }

      // optional int32 speed = 6;
      private int speed_ ;
      /**
       * <code>optional int32 speed = 6;</code>
       *
       * <pre>
       *GPS车速(综合车速)
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 speed = 6;</code>
       *
       * <pre>
       *GPS车速(综合车速)
       * </pre>
       */
      public int getSpeed() {
        return speed_;
      }
      /**
       * <code>optional int32 speed = 6;</code>
       *
       * <pre>
       *GPS车速(综合车速)
       * </pre>
       */
      public Builder setSpeed(int value) {
        bitField0_ |= 0x00000020;
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 speed = 6;</code>
       *
       * <pre>
       *GPS车速(综合车速)
       * </pre>
       */
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00000020);
        speed_ = 0;
        onChanged();
        return this;
      }

      // optional int32 accelerator = 7;
      private int accelerator_ ;
      /**
       * <code>optional int32 accelerator = 7;</code>
       *
       * <pre>
       *油门开度
       * </pre>
       */
      public boolean hasAccelerator() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 accelerator = 7;</code>
       *
       * <pre>
       *油门开度
       * </pre>
       */
      public int getAccelerator() {
        return accelerator_;
      }
      /**
       * <code>optional int32 accelerator = 7;</code>
       *
       * <pre>
       *油门开度
       * </pre>
       */
      public Builder setAccelerator(int value) {
        bitField0_ |= 0x00000040;
        accelerator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 accelerator = 7;</code>
       *
       * <pre>
       *油门开度
       * </pre>
       */
      public Builder clearAccelerator() {
        bitField0_ = (bitField0_ & ~0x00000040);
        accelerator_ = 0;
        onChanged();
        return this;
      }

      // optional int32 brake = 8;
      private int brake_ ;
      /**
       * <code>optional int32 brake = 8;</code>
       *
       * <pre>
       *制动开关
       * </pre>
       */
      public boolean hasBrake() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 brake = 8;</code>
       *
       * <pre>
       *制动开关
       * </pre>
       */
      public int getBrake() {
        return brake_;
      }
      /**
       * <code>optional int32 brake = 8;</code>
       *
       * <pre>
       *制动开关
       * </pre>
       */
      public Builder setBrake(int value) {
        bitField0_ |= 0x00000080;
        brake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 brake = 8;</code>
       *
       * <pre>
       *制动开关
       * </pre>
       */
      public Builder clearBrake() {
        bitField0_ = (bitField0_ & ~0x00000080);
        brake_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rotation = 9;
      private int rotation_ ;
      /**
       * <code>optional int32 rotation = 9;</code>
       *
       * <pre>
       *发动机转速
       * </pre>
       */
      public boolean hasRotation() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 rotation = 9;</code>
       *
       * <pre>
       *发动机转速
       * </pre>
       */
      public int getRotation() {
        return rotation_;
      }
      /**
       * <code>optional int32 rotation = 9;</code>
       *
       * <pre>
       *发动机转速
       * </pre>
       */
      public Builder setRotation(int value) {
        bitField0_ |= 0x00000100;
        rotation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rotation = 9;</code>
       *
       * <pre>
       *发动机转速
       * </pre>
       */
      public Builder clearRotation() {
        bitField0_ = (bitField0_ & ~0x00000100);
        rotation_ = 0;
        onChanged();
        return this;
      }

      // optional int32 gear = 10;
      private int gear_ ;
      /**
       * <code>optional int32 gear = 10;</code>
       *
       * <pre>
       *当前挡位
       * </pre>
       */
      public boolean hasGear() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 gear = 10;</code>
       *
       * <pre>
       *当前挡位
       * </pre>
       */
      public int getGear() {
        return gear_;
      }
      /**
       * <code>optional int32 gear = 10;</code>
       *
       * <pre>
       *当前挡位
       * </pre>
       */
      public Builder setGear(int value) {
        bitField0_ |= 0x00000200;
        gear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gear = 10;</code>
       *
       * <pre>
       *当前挡位
       * </pre>
       */
      public Builder clearGear() {
        bitField0_ = (bitField0_ & ~0x00000200);
        gear_ = 0;
        onChanged();
        return this;
      }

      // optional int32 clutchSwitch = 11;
      private int clutchSwitch_ ;
      /**
       * <code>optional int32 clutchSwitch = 11;</code>
       *
       * <pre>
       *离合器开关
       * </pre>
       */
      public boolean hasClutchSwitch() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 clutchSwitch = 11;</code>
       *
       * <pre>
       *离合器开关
       * </pre>
       */
      public int getClutchSwitch() {
        return clutchSwitch_;
      }
      /**
       * <code>optional int32 clutchSwitch = 11;</code>
       *
       * <pre>
       *离合器开关
       * </pre>
       */
      public Builder setClutchSwitch(int value) {
        bitField0_ |= 0x00000400;
        clutchSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 clutchSwitch = 11;</code>
       *
       * <pre>
       *离合器开关
       * </pre>
       */
      public Builder clearClutchSwitch() {
        bitField0_ = (bitField0_ & ~0x00000400);
        clutchSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional int32 realTimeOilConsumption = 12;
      private int realTimeOilConsumption_ ;
      /**
       * <code>optional int32 realTimeOilConsumption = 12;</code>
       *
       * <pre>
       *发动机瞬时油耗
       * </pre>
       */
      public boolean hasRealTimeOilConsumption() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 realTimeOilConsumption = 12;</code>
       *
       * <pre>
       *发动机瞬时油耗
       * </pre>
       */
      public int getRealTimeOilConsumption() {
        return realTimeOilConsumption_;
      }
      /**
       * <code>optional int32 realTimeOilConsumption = 12;</code>
       *
       * <pre>
       *发动机瞬时油耗
       * </pre>
       */
      public Builder setRealTimeOilConsumption(int value) {
        bitField0_ |= 0x00000800;
        realTimeOilConsumption_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 realTimeOilConsumption = 12;</code>
       *
       * <pre>
       *发动机瞬时油耗
       * </pre>
       */
      public Builder clearRealTimeOilConsumption() {
        bitField0_ = (bitField0_ & ~0x00000800);
        realTimeOilConsumption_ = 0;
        onChanged();
        return this;
      }

      // optional int32 fuelConsumptionRate = 13;
      private int fuelConsumptionRate_ ;
      /**
       * <code>optional int32 fuelConsumptionRate = 13;</code>
       *
       * <pre>
       *发动机燃油消耗率 或 CN6 燃油流量
       * </pre>
       */
      public boolean hasFuelConsumptionRate() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 fuelConsumptionRate = 13;</code>
       *
       * <pre>
       *发动机燃油消耗率 或 CN6 燃油流量
       * </pre>
       */
      public int getFuelConsumptionRate() {
        return fuelConsumptionRate_;
      }
      /**
       * <code>optional int32 fuelConsumptionRate = 13;</code>
       *
       * <pre>
       *发动机燃油消耗率 或 CN6 燃油流量
       * </pre>
       */
      public Builder setFuelConsumptionRate(int value) {
        bitField0_ |= 0x00001000;
        fuelConsumptionRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fuelConsumptionRate = 13;</code>
       *
       * <pre>
       *发动机燃油消耗率 或 CN6 燃油流量
       * </pre>
       */
      public Builder clearFuelConsumptionRate() {
        bitField0_ = (bitField0_ & ~0x00001000);
        fuelConsumptionRate_ = 0;
        onChanged();
        return this;
      }

      // optional int32 retransmissionPackets = 38;
      private int retransmissionPackets_ ;
      /**
       * <code>optional int32 retransmissionPackets = 38;</code>
       *
       * <pre>
       *是否重传包
       * </pre>
       */
      public boolean hasRetransmissionPackets() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 retransmissionPackets = 38;</code>
       *
       * <pre>
       *是否重传包
       * </pre>
       */
      public int getRetransmissionPackets() {
        return retransmissionPackets_;
      }
      /**
       * <code>optional int32 retransmissionPackets = 38;</code>
       *
       * <pre>
       *是否重传包
       * </pre>
       */
      public Builder setRetransmissionPackets(int value) {
        bitField0_ |= 0x00002000;
        retransmissionPackets_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 retransmissionPackets = 38;</code>
       *
       * <pre>
       *是否重传包
       * </pre>
       */
      public Builder clearRetransmissionPackets() {
        bitField0_ = (bitField0_ & ~0x00002000);
        retransmissionPackets_ = 0;
        onChanged();
        return this;
      }

      // optional int64 terminalId = 50;
      private long terminalId_ ;
      /**
       * <code>optional int64 terminalId = 50;</code>
       *
       * <pre>
       *终端sim卡号，手机号
       * </pre>
       */
      public boolean hasTerminalId() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int64 terminalId = 50;</code>
       *
       * <pre>
       *终端sim卡号，手机号
       * </pre>
       */
      public long getTerminalId() {
        return terminalId_;
      }
      /**
       * <code>optional int64 terminalId = 50;</code>
       *
       * <pre>
       *终端sim卡号，手机号
       * </pre>
       */
      public Builder setTerminalId(long value) {
        bitField0_ |= 0x00004000;
        terminalId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 terminalId = 50;</code>
       *
       * <pre>
       *终端sim卡号，手机号
       * </pre>
       */
      public Builder clearTerminalId() {
        bitField0_ = (bitField0_ & ~0x00004000);
        terminalId_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 serialNumber = 100;
      private long serialNumber_ ;
      /**
       * <code>optional int64 serialNumber = 100;</code>
       *
       * <pre>
       *序列号
       * </pre>
       */
      public boolean hasSerialNumber() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int64 serialNumber = 100;</code>
       *
       * <pre>
       *序列号
       * </pre>
       */
      public long getSerialNumber() {
        return serialNumber_;
      }
      /**
       * <code>optional int64 serialNumber = 100;</code>
       *
       * <pre>
       *序列号
       * </pre>
       */
      public Builder setSerialNumber(long value) {
        bitField0_ |= 0x00008000;
        serialNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 serialNumber = 100;</code>
       *
       * <pre>
       *序列号
       * </pre>
       */
      public Builder clearSerialNumber() {
        bitField0_ = (bitField0_ & ~0x00008000);
        serialNumber_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 receiveDate = 110;
      private long receiveDate_ ;
      /**
       * <code>optional int64 receiveDate = 110;</code>
       *
       * <pre>
       *TA接收数据时间
       * </pre>
       */
      public boolean hasReceiveDate() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int64 receiveDate = 110;</code>
       *
       * <pre>
       *TA接收数据时间
       * </pre>
       */
      public long getReceiveDate() {
        return receiveDate_;
      }
      /**
       * <code>optional int64 receiveDate = 110;</code>
       *
       * <pre>
       *TA接收数据时间
       * </pre>
       */
      public Builder setReceiveDate(long value) {
        bitField0_ |= 0x00010000;
        receiveDate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 receiveDate = 110;</code>
       *
       * <pre>
       *TA接收数据时间
       * </pre>
       */
      public Builder clearReceiveDate() {
        bitField0_ = (bitField0_ & ~0x00010000);
        receiveDate_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 originalLat = 120;
      private int originalLat_ ;
      /**
       * <code>optional int32 originalLat = 120;</code>
       *
       * <pre>
       *原始纬度
       * </pre>
       */
      public boolean hasOriginalLat() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 originalLat = 120;</code>
       *
       * <pre>
       *原始纬度
       * </pre>
       */
      public int getOriginalLat() {
        return originalLat_;
      }
      /**
       * <code>optional int32 originalLat = 120;</code>
       *
       * <pre>
       *原始纬度
       * </pre>
       */
      public Builder setOriginalLat(int value) {
        bitField0_ |= 0x00020000;
        originalLat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 originalLat = 120;</code>
       *
       * <pre>
       *原始纬度
       * </pre>
       */
      public Builder clearOriginalLat() {
        bitField0_ = (bitField0_ & ~0x00020000);
        originalLat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 originalLng = 130;
      private int originalLng_ ;
      /**
       * <code>optional int32 originalLng = 130;</code>
       *
       * <pre>
       *原始经度
       * </pre>
       */
      public boolean hasOriginalLng() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 originalLng = 130;</code>
       *
       * <pre>
       *原始经度
       * </pre>
       */
      public int getOriginalLng() {
        return originalLng_;
      }
      /**
       * <code>optional int32 originalLng = 130;</code>
       *
       * <pre>
       *原始经度
       * </pre>
       */
      public Builder setOriginalLng(int value) {
        bitField0_ |= 0x00040000;
        originalLng_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 originalLng = 130;</code>
       *
       * <pre>
       *原始经度
       * </pre>
       */
      public Builder clearOriginalLng() {
        bitField0_ = (bitField0_ & ~0x00040000);
        originalLng_ = 0;
        onChanged();
        return this;
      }

      // optional int32 protocolType = 220;
      private int protocolType_ ;
      /**
       * <code>optional int32 protocolType = 220;</code>
       *
       * <pre>
       *协议类型，0为37（默认为37），1为3B协议  2 为CN6
       * </pre>
       */
      public boolean hasProtocolType() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 protocolType = 220;</code>
       *
       * <pre>
       *协议类型，0为37（默认为37），1为3B协议  2 为CN6
       * </pre>
       */
      public int getProtocolType() {
        return protocolType_;
      }
      /**
       * <code>optional int32 protocolType = 220;</code>
       *
       * <pre>
       *协议类型，0为37（默认为37），1为3B协议  2 为CN6
       * </pre>
       */
      public Builder setProtocolType(int value) {
        bitField0_ |= 0x00080000;
        protocolType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 protocolType = 220;</code>
       *
       * <pre>
       *协议类型，0为37（默认为37），1为3B协议  2 为CN6
       * </pre>
       */
      public Builder clearProtocolType() {
        bitField0_ = (bitField0_ & ~0x00080000);
        protocolType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 vehicleSpeed = 300;
      private int vehicleSpeed_ ;
      /**
       * <code>optional int32 vehicleSpeed = 300;</code>
       *
       * <pre>
       *-------------------------------------------------   cn6   -------------------------------------------------//
       * </pre>
       */
      public boolean hasVehicleSpeed() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 vehicleSpeed = 300;</code>
       *
       * <pre>
       *-------------------------------------------------   cn6   -------------------------------------------------//
       * </pre>
       */
      public int getVehicleSpeed() {
        return vehicleSpeed_;
      }
      /**
       * <code>optional int32 vehicleSpeed = 300;</code>
       *
       * <pre>
       *-------------------------------------------------   cn6   -------------------------------------------------//
       * </pre>
       */
      public Builder setVehicleSpeed(int value) {
        bitField0_ |= 0x00100000;
        vehicleSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vehicleSpeed = 300;</code>
       *
       * <pre>
       *-------------------------------------------------   cn6   -------------------------------------------------//
       * </pre>
       */
      public Builder clearVehicleSpeed() {
        bitField0_ = (bitField0_ & ~0x00100000);
        vehicleSpeed_ = 0;
        onChanged();
        return this;
      }

      // optional int32 barometricPressure = 301;
      private int barometricPressure_ ;
      /**
       * <code>optional int32 barometricPressure = 301;</code>
       *
       * <pre>
       *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
       * </pre>
       */
      public boolean hasBarometricPressure() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 barometricPressure = 301;</code>
       *
       * <pre>
       *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
       * </pre>
       */
      public int getBarometricPressure() {
        return barometricPressure_;
      }
      /**
       * <code>optional int32 barometricPressure = 301;</code>
       *
       * <pre>
       *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
       * </pre>
       */
      public Builder setBarometricPressure(int value) {
        bitField0_ |= 0x00200000;
        barometricPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 barometricPressure = 301;</code>
       *
       * <pre>
       *大气压力(直接测量或估计值)  精度：0.5 kPa/bit  数据范围：0 ~ 125 kPa  “0xFF”表示无效
       * </pre>
       */
      public Builder clearBarometricPressure() {
        bitField0_ = (bitField0_ & ~0x00200000);
        barometricPressure_ = 0;
        onChanged();
        return this;
      }

      // optional int32 frictionTorque = 302;
      private int frictionTorque_ ;
      /**
       * <code>optional int32 frictionTorque = 302;</code>
       *
       * <pre>
       *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
       * </pre>
       */
      public boolean hasFrictionTorque() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 frictionTorque = 302;</code>
       *
       * <pre>
       *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
       * </pre>
       */
      public int getFrictionTorque() {
        return frictionTorque_;
      }
      /**
       * <code>optional int32 frictionTorque = 302;</code>
       *
       * <pre>
       *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
       * </pre>
       */
      public Builder setFrictionTorque(int value) {
        bitField0_ |= 0x00400000;
        frictionTorque_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 frictionTorque = 302;</code>
       *
       * <pre>
       *摩擦扭矩 精度：1%/bit 偏移量：-125 “0xFF”表示无效
       * </pre>
       */
      public Builder clearFrictionTorque() {
        bitField0_ = (bitField0_ & ~0x00400000);
        frictionTorque_ = 0;
        onChanged();
        return this;
      }

      // optional int32 scrUpStreamNOxSensorOutput = 303;
      private int scrUpStreamNOxSensorOutput_ ;
      /**
       * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
       *
       * <pre>
       *SCR 上游 NOx 传感器输出值
       * </pre>
       */
      public boolean hasScrUpStreamNOxSensorOutput() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
       *
       * <pre>
       *SCR 上游 NOx 传感器输出值
       * </pre>
       */
      public int getScrUpStreamNOxSensorOutput() {
        return scrUpStreamNOxSensorOutput_;
      }
      /**
       * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
       *
       * <pre>
       *SCR 上游 NOx 传感器输出值
       * </pre>
       */
      public Builder setScrUpStreamNOxSensorOutput(int value) {
        bitField0_ |= 0x00800000;
        scrUpStreamNOxSensorOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 scrUpStreamNOxSensorOutput = 303;</code>
       *
       * <pre>
       *SCR 上游 NOx 传感器输出值
       * </pre>
       */
      public Builder clearScrUpStreamNOxSensorOutput() {
        bitField0_ = (bitField0_ & ~0x00800000);
        scrUpStreamNOxSensorOutput_ = 0;
        onChanged();
        return this;
      }

      // optional int32 scrDownStreamNOxSensorOutput = 304;
      private int scrDownStreamNOxSensorOutput_ ;
      /**
       * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
       *
       * <pre>
       *SCR 下游 NOx 传感器输出值
       * </pre>
       */
      public boolean hasScrDownStreamNOxSensorOutput() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
       *
       * <pre>
       *SCR 下游 NOx 传感器输出值
       * </pre>
       */
      public int getScrDownStreamNOxSensorOutput() {
        return scrDownStreamNOxSensorOutput_;
      }
      /**
       * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
       *
       * <pre>
       *SCR 下游 NOx 传感器输出值
       * </pre>
       */
      public Builder setScrDownStreamNOxSensorOutput(int value) {
        bitField0_ |= 0x01000000;
        scrDownStreamNOxSensorOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 scrDownStreamNOxSensorOutput = 304;</code>
       *
       * <pre>
       *SCR 下游 NOx 传感器输出值
       * </pre>
       */
      public Builder clearScrDownStreamNOxSensorOutput() {
        bitField0_ = (bitField0_ & ~0x01000000);
        scrDownStreamNOxSensorOutput_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reagentAllowance = 305;
      private int reagentAllowance_ ;
      /**
       * <code>optional int32 reagentAllowance = 305;</code>
       *
       * <pre>
       *反应剂余量
       * </pre>
       */
      public boolean hasReagentAllowance() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 reagentAllowance = 305;</code>
       *
       * <pre>
       *反应剂余量
       * </pre>
       */
      public int getReagentAllowance() {
        return reagentAllowance_;
      }
      /**
       * <code>optional int32 reagentAllowance = 305;</code>
       *
       * <pre>
       *反应剂余量
       * </pre>
       */
      public Builder setReagentAllowance(int value) {
        bitField0_ |= 0x02000000;
        reagentAllowance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reagentAllowance = 305;</code>
       *
       * <pre>
       *反应剂余量
       * </pre>
       */
      public Builder clearReagentAllowance() {
        bitField0_ = (bitField0_ & ~0x02000000);
        reagentAllowance_ = 0;
        onChanged();
        return this;
      }

      // optional int32 airInflow = 306;
      private int airInflow_ ;
      /**
       * <code>optional int32 airInflow = 306;</code>
       *
       * <pre>
       *进气量
       * </pre>
       */
      public boolean hasAirInflow() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 airInflow = 306;</code>
       *
       * <pre>
       *进气量
       * </pre>
       */
      public int getAirInflow() {
        return airInflow_;
      }
      /**
       * <code>optional int32 airInflow = 306;</code>
       *
       * <pre>
       *进气量
       * </pre>
       */
      public Builder setAirInflow(int value) {
        bitField0_ |= 0x04000000;
        airInflow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 airInflow = 306;</code>
       *
       * <pre>
       *进气量
       * </pre>
       */
      public Builder clearAirInflow() {
        bitField0_ = (bitField0_ & ~0x04000000);
        airInflow_ = 0;
        onChanged();
        return this;
      }

      // optional int32 scrInletTemperature = 307;
      private int scrInletTemperature_ ;
      /**
       * <code>optional int32 scrInletTemperature = 307;</code>
       *
       * <pre>
       *SCR 入口温度
       * </pre>
       */
      public boolean hasScrInletTemperature() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 scrInletTemperature = 307;</code>
       *
       * <pre>
       *SCR 入口温度
       * </pre>
       */
      public int getScrInletTemperature() {
        return scrInletTemperature_;
      }
      /**
       * <code>optional int32 scrInletTemperature = 307;</code>
       *
       * <pre>
       *SCR 入口温度
       * </pre>
       */
      public Builder setScrInletTemperature(int value) {
        bitField0_ |= 0x08000000;
        scrInletTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 scrInletTemperature = 307;</code>
       *
       * <pre>
       *SCR 入口温度
       * </pre>
       */
      public Builder clearScrInletTemperature() {
        bitField0_ = (bitField0_ & ~0x08000000);
        scrInletTemperature_ = 0;
        onChanged();
        return this;
      }

      // optional int32 scrOutletTemperature = 308;
      private int scrOutletTemperature_ ;
      /**
       * <code>optional int32 scrOutletTemperature = 308;</code>
       *
       * <pre>
       *SCR 出口温度
       * </pre>
       */
      public boolean hasScrOutletTemperature() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 scrOutletTemperature = 308;</code>
       *
       * <pre>
       *SCR 出口温度
       * </pre>
       */
      public int getScrOutletTemperature() {
        return scrOutletTemperature_;
      }
      /**
       * <code>optional int32 scrOutletTemperature = 308;</code>
       *
       * <pre>
       *SCR 出口温度
       * </pre>
       */
      public Builder setScrOutletTemperature(int value) {
        bitField0_ |= 0x10000000;
        scrOutletTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 scrOutletTemperature = 308;</code>
       *
       * <pre>
       *SCR 出口温度
       * </pre>
       */
      public Builder clearScrOutletTemperature() {
        bitField0_ = (bitField0_ & ~0x10000000);
        scrOutletTemperature_ = 0;
        onChanged();
        return this;
      }

      // optional int32 dpfDropoutVoltage = 309;
      private int dpfDropoutVoltage_ ;
      /**
       * <code>optional int32 dpfDropoutVoltage = 309;</code>
       *
       * <pre>
       *DPF压差
       * </pre>
       */
      public boolean hasDpfDropoutVoltage() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 dpfDropoutVoltage = 309;</code>
       *
       * <pre>
       *DPF压差
       * </pre>
       */
      public int getDpfDropoutVoltage() {
        return dpfDropoutVoltage_;
      }
      /**
       * <code>optional int32 dpfDropoutVoltage = 309;</code>
       *
       * <pre>
       *DPF压差
       * </pre>
       */
      public Builder setDpfDropoutVoltage(int value) {
        bitField0_ |= 0x20000000;
        dpfDropoutVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dpfDropoutVoltage = 309;</code>
       *
       * <pre>
       *DPF压差
       * </pre>
       */
      public Builder clearDpfDropoutVoltage() {
        bitField0_ = (bitField0_ & ~0x20000000);
        dpfDropoutVoltage_ = 0;
        onChanged();
        return this;
      }

      // optional int32 engineCoolantTemperature = 310;
      private int engineCoolantTemperature_ ;
      /**
       * <code>optional int32 engineCoolantTemperature = 310;</code>
       *
       * <pre>
       *发动机冷却液温度
       * </pre>
       */
      public boolean hasEngineCoolantTemperature() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 engineCoolantTemperature = 310;</code>
       *
       * <pre>
       *发动机冷却液温度
       * </pre>
       */
      public int getEngineCoolantTemperature() {
        return engineCoolantTemperature_;
      }
      /**
       * <code>optional int32 engineCoolantTemperature = 310;</code>
       *
       * <pre>
       *发动机冷却液温度
       * </pre>
       */
      public Builder setEngineCoolantTemperature(int value) {
        bitField0_ |= 0x40000000;
        engineCoolantTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 engineCoolantTemperature = 310;</code>
       *
       * <pre>
       *发动机冷却液温度
       * </pre>
       */
      public Builder clearEngineCoolantTemperature() {
        bitField0_ = (bitField0_ & ~0x40000000);
        engineCoolantTemperature_ = 0;
        onChanged();
        return this;
      }

      // optional int32 tankLevel = 311;
      private int tankLevel_ ;
      /**
       * <code>optional int32 tankLevel = 311;</code>
       *
       * <pre>
       *油箱液位
       * </pre>
       */
      public boolean hasTankLevel() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 tankLevel = 311;</code>
       *
       * <pre>
       *油箱液位
       * </pre>
       */
      public int getTankLevel() {
        return tankLevel_;
      }
      /**
       * <code>optional int32 tankLevel = 311;</code>
       *
       * <pre>
       *油箱液位
       * </pre>
       */
      public Builder setTankLevel(int value) {
        bitField0_ |= 0x80000000;
        tankLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tankLevel = 311;</code>
       *
       * <pre>
       *油箱液位
       * </pre>
       */
      public Builder clearTankLevel() {
        bitField0_ = (bitField0_ & ~0x80000000);
        tankLevel_ = 0;
        onChanged();
        return this;
      }

      // optional int32 positioningState = 312;
      private int positioningState_ ;
      /**
       * <code>optional int32 positioningState = 312;</code>
       *
       * <pre>
       *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
       * </pre>
       */
      public boolean hasPositioningState() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 positioningState = 312;</code>
       *
       * <pre>
       *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
       * </pre>
       */
      public int getPositioningState() {
        return positioningState_;
      }
      /**
       * <code>optional int32 positioningState = 312;</code>
       *
       * <pre>
       *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
       * </pre>
       */
      public Builder setPositioningState(int value) {
        bitField1_ |= 0x00000001;
        positioningState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 positioningState = 312;</code>
       *
       * <pre>
       *定位状态   Bit0: 0 有效定位，1 无效定位  Bit1:北纬南纬  Bit2:0 东经 1,西经  Bit3~Bit7:保留
       * </pre>
       */
      public Builder clearPositioningState() {
        bitField1_ = (bitField1_ & ~0x00000001);
        positioningState_ = 0;
        onChanged();
        return this;
      }

      // optional int64 mileage = 313;
      private long mileage_ ;
      /**
       * <code>optional int64 mileage = 313;</code>
       *
       * <pre>
       *累计里程 CN6
       * </pre>
       */
      public boolean hasMileage() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 mileage = 313;</code>
       *
       * <pre>
       *累计里程 CN6
       * </pre>
       */
      public long getMileage() {
        return mileage_;
      }
      /**
       * <code>optional int64 mileage = 313;</code>
       *
       * <pre>
       *累计里程 CN6
       * </pre>
       */
      public Builder setMileage(long value) {
        bitField1_ |= 0x00000002;
        mileage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 mileage = 313;</code>
       *
       * <pre>
       *累计里程 CN6
       * </pre>
       */
      public Builder clearMileage() {
        bitField1_ = (bitField1_ & ~0x00000002);
        mileage_ = 0L;
        onChanged();
        return this;
      }

      // optional string rValue = 314;
      private Object rValue_ = "";
      /**
       * <code>optional string rValue = 314;</code>
       *
       * <pre>
       *16进制ASCII编码 R值
       * </pre>
       */
      public boolean hasRValue() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string rValue = 314;</code>
       *
       * <pre>
       *16进制ASCII编码 R值
       * </pre>
       */
      public String getRValue() {
        Object ref = rValue_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          rValue_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>optional string rValue = 314;</code>
       *
       * <pre>
       *16进制ASCII编码 R值
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRValueBytes() {
        Object ref = rValue_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          rValue_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string rValue = 314;</code>
       *
       * <pre>
       *16进制ASCII编码 R值
       * </pre>
       */
      public Builder setRValue(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        rValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string rValue = 314;</code>
       *
       * <pre>
       *16进制ASCII编码 R值
       * </pre>
       */
      public Builder clearRValue() {
        bitField1_ = (bitField1_ & ~0x00000004);
        rValue_ = getDefaultInstance().getRValue();
        onChanged();
        return this;
      }
      /**
       * <code>optional string rValue = 314;</code>
       *
       * <pre>
       *16进制ASCII编码 R值
       * </pre>
       */
      public Builder setRValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        rValue_ = value;
        onChanged();
        return this;
      }

      // optional string sValue = 315;
      private Object sValue_ = "";
      /**
       * <code>optional string sValue = 315;</code>
       *
       * <pre>
       *16进制ASCII编码 S值
       * </pre>
       */
      public boolean hasSValue() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string sValue = 315;</code>
       *
       * <pre>
       *16进制ASCII编码 S值
       * </pre>
       */
      public String getSValue() {
        Object ref = sValue_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          sValue_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>optional string sValue = 315;</code>
       *
       * <pre>
       *16进制ASCII编码 S值
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSValueBytes() {
        Object ref = sValue_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          sValue_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string sValue = 315;</code>
       *
       * <pre>
       *16进制ASCII编码 S值
       * </pre>
       */
      public Builder setSValue(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000008;
        sValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string sValue = 315;</code>
       *
       * <pre>
       *16进制ASCII编码 S值
       * </pre>
       */
      public Builder clearSValue() {
        bitField1_ = (bitField1_ & ~0x00000008);
        sValue_ = getDefaultInstance().getSValue();
        onChanged();
        return this;
      }
      /**
       * <code>optional string sValue = 315;</code>
       *
       * <pre>
       *16进制ASCII编码 S值
       * </pre>
       */
      public Builder setSValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000008;
        sValue_ = value;
        onChanged();
        return this;
      }

      // optional int32 commandUnit = 316;
      private int commandUnit_ ;
      /**
       * <code>optional int32 commandUnit = 316;</code>
       *
       * <pre>
       *命令单元
       * </pre>
       */
      public boolean hasCommandUnit() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 commandUnit = 316;</code>
       *
       * <pre>
       *命令单元
       * </pre>
       */
      public int getCommandUnit() {
        return commandUnit_;
      }
      /**
       * <code>optional int32 commandUnit = 316;</code>
       *
       * <pre>
       *命令单元
       * </pre>
       */
      public Builder setCommandUnit(int value) {
        bitField1_ |= 0x00000010;
        commandUnit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 commandUnit = 316;</code>
       *
       * <pre>
       *命令单元
       * </pre>
       */
      public Builder clearCommandUnit() {
        bitField1_ = (bitField1_ & ~0x00000010);
        commandUnit_ = 0;
        onChanged();
        return this;
      }

      // optional string vin = 317;
      private Object vin_ = "";
      /**
       * <code>optional string vin = 317;</code>
       *
       * <pre>
       *车辆识别码
       * </pre>
       */
      public boolean hasVin() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string vin = 317;</code>
       *
       * <pre>
       *车辆识别码
       * </pre>
       */
      public String getVin() {
        Object ref = vin_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vin_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>optional string vin = 317;</code>
       *
       * <pre>
       *车辆识别码
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVinBytes() {
        Object ref = vin_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          vin_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string vin = 317;</code>
       *
       * <pre>
       *车辆识别码
       * </pre>
       */
      public Builder setVin(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000020;
        vin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string vin = 317;</code>
       *
       * <pre>
       *车辆识别码
       * </pre>
       */
      public Builder clearVin() {
        bitField1_ = (bitField1_ & ~0x00000020);
        vin_ = getDefaultInstance().getVin();
        onChanged();
        return this;
      }
      /**
       * <code>optional string vin = 317;</code>
       *
       * <pre>
       *车辆识别码
       * </pre>
       */
      public Builder setVinBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000020;
        vin_ = value;
        onChanged();
        return this;
      }

      // optional int32 terminalVersion = 318;
      private int terminalVersion_ ;
      /**
       * <code>optional int32 terminalVersion = 318;</code>
       *
       * <pre>
       *终端软件版本号
       * </pre>
       */
      public boolean hasTerminalVersion() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 terminalVersion = 318;</code>
       *
       * <pre>
       *终端软件版本号
       * </pre>
       */
      public int getTerminalVersion() {
        return terminalVersion_;
      }
      /**
       * <code>optional int32 terminalVersion = 318;</code>
       *
       * <pre>
       *终端软件版本号
       * </pre>
       */
      public Builder setTerminalVersion(int value) {
        bitField1_ |= 0x00000040;
        terminalVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 terminalVersion = 318;</code>
       *
       * <pre>
       *终端软件版本号
       * </pre>
       */
      public Builder clearTerminalVersion() {
        bitField1_ = (bitField1_ & ~0x00000040);
        terminalVersion_ = 0;
        onChanged();
        return this;
      }

      // optional int32 encryption = 319;
      private int encryption_ ;
      /**
       * <code>optional int32 encryption = 319;</code>
       *
       * <pre>
       *数据加密方式
       * </pre>
       */
      public boolean hasEncryption() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 encryption = 319;</code>
       *
       * <pre>
       *数据加密方式
       * </pre>
       */
      public int getEncryption() {
        return encryption_;
      }
      /**
       * <code>optional int32 encryption = 319;</code>
       *
       * <pre>
       *数据加密方式
       * </pre>
       */
      public Builder setEncryption(int value) {
        bitField1_ |= 0x00000080;
        encryption_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 encryption = 319;</code>
       *
       * <pre>
       *数据加密方式
       * </pre>
       */
      public Builder clearEncryption() {
        bitField1_ = (bitField1_ & ~0x00000080);
        encryption_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rLength = 320;
      private int rLength_ ;
      /**
       * <code>optional int32 rLength = 320;</code>
       *
       * <pre>
       *R值 长度
       * </pre>
       */
      public boolean hasRLength() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 rLength = 320;</code>
       *
       * <pre>
       *R值 长度
       * </pre>
       */
      public int getRLength() {
        return rLength_;
      }
      /**
       * <code>optional int32 rLength = 320;</code>
       *
       * <pre>
       *R值 长度
       * </pre>
       */
      public Builder setRLength(int value) {
        bitField1_ |= 0x00000100;
        rLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rLength = 320;</code>
       *
       * <pre>
       *R值 长度
       * </pre>
       */
      public Builder clearRLength() {
        bitField1_ = (bitField1_ & ~0x00000100);
        rLength_ = 0;
        onChanged();
        return this;
      }

      // optional int32 sLength = 321;
      private int sLength_ ;
      /**
       * <code>optional int32 sLength = 321;</code>
       *
       * <pre>
       *S值 长度
       * </pre>
       */
      public boolean hasSLength() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 sLength = 321;</code>
       *
       * <pre>
       *S值 长度
       * </pre>
       */
      public int getSLength() {
        return sLength_;
      }
      /**
       * <code>optional int32 sLength = 321;</code>
       *
       * <pre>
       *S值 长度
       * </pre>
       */
      public Builder setSLength(int value) {
        bitField1_ |= 0x00000200;
        sLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sLength = 321;</code>
       *
       * <pre>
       *S值 长度
       * </pre>
       */
      public Builder clearSLength() {
        bitField1_ = (bitField1_ & ~0x00000200);
        sLength_ = 0;
        onChanged();
        return this;
      }

      // optional int32 engineBrakingState = 405;
      private int engineBrakingState_ ;
      /**
       * <code>optional int32 engineBrakingState = 405;</code>
       *
       * <pre>
       *发动机制动状态
       * </pre>
       */
      public boolean hasEngineBrakingState() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 engineBrakingState = 405;</code>
       *
       * <pre>
       *发动机制动状态
       * </pre>
       */
      public int getEngineBrakingState() {
        return engineBrakingState_;
      }
      /**
       * <code>optional int32 engineBrakingState = 405;</code>
       *
       * <pre>
       *发动机制动状态
       * </pre>
       */
      public Builder setEngineBrakingState(int value) {
        bitField1_ |= 0x00000400;
        engineBrakingState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 engineBrakingState = 405;</code>
       *
       * <pre>
       *发动机制动状态
       * </pre>
       */
      public Builder clearEngineBrakingState() {
        bitField1_ = (bitField1_ & ~0x00000400);
        engineBrakingState_ = 0;
        onChanged();
        return this;
      }

      // optional int32 exhaustBrakingState = 410;
      private int exhaustBrakingState_ ;
      /**
       * <code>optional int32 exhaustBrakingState = 410;</code>
       *
       * <pre>
       *排气制动状态
       * </pre>
       */
      public boolean hasExhaustBrakingState() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 exhaustBrakingState = 410;</code>
       *
       * <pre>
       *排气制动状态
       * </pre>
       */
      public int getExhaustBrakingState() {
        return exhaustBrakingState_;
      }
      /**
       * <code>optional int32 exhaustBrakingState = 410;</code>
       *
       * <pre>
       *排气制动状态
       * </pre>
       */
      public Builder setExhaustBrakingState(int value) {
        bitField1_ |= 0x00000800;
        exhaustBrakingState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 exhaustBrakingState = 410;</code>
       *
       * <pre>
       *排气制动状态
       * </pre>
       */
      public Builder clearExhaustBrakingState() {
        bitField1_ = (bitField1_ & ~0x00000800);
        exhaustBrakingState_ = 0;
        onChanged();
        return this;
      }

      // optional int32 emptySignal = 415;
      private int emptySignal_ ;
      /**
       * <code>optional int32 emptySignal = 415;</code>
       *
       * <pre>
       *空挡信号
       * </pre>
       */
      public boolean hasEmptySignal() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 emptySignal = 415;</code>
       *
       * <pre>
       *空挡信号
       * </pre>
       */
      public int getEmptySignal() {
        return emptySignal_;
      }
      /**
       * <code>optional int32 emptySignal = 415;</code>
       *
       * <pre>
       *空挡信号
       * </pre>
       */
      public Builder setEmptySignal(int value) {
        bitField1_ |= 0x00001000;
        emptySignal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 emptySignal = 415;</code>
       *
       * <pre>
       *空挡信号
       * </pre>
       */
      public Builder clearEmptySignal() {
        bitField1_ = (bitField1_ & ~0x00001000);
        emptySignal_ = 0;
        onChanged();
        return this;
      }

      // optional int32 exhaustFlow = 420;
      private int exhaustFlow_ ;
      /**
       * <code>optional int32 exhaustFlow = 420;</code>
       *
       * <pre>
       *排气流量
       * </pre>
       */
      public boolean hasExhaustFlow() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 exhaustFlow = 420;</code>
       *
       * <pre>
       *排气流量
       * </pre>
       */
      public int getExhaustFlow() {
        return exhaustFlow_;
      }
      /**
       * <code>optional int32 exhaustFlow = 420;</code>
       *
       * <pre>
       *排气流量
       * </pre>
       */
      public Builder setExhaustFlow(int value) {
        bitField1_ |= 0x00002000;
        exhaustFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 exhaustFlow = 420;</code>
       *
       * <pre>
       *排气流量
       * </pre>
       */
      public Builder clearExhaustFlow() {
        bitField1_ = (bitField1_ & ~0x00002000);
        exhaustFlow_ = 0;
        onChanged();
        return this;
      }

      // optional int32 fanSpeed = 425;
      private int fanSpeed_ ;
      /**
       * <code>optional int32 fanSpeed = 425;</code>
       *
       * <pre>
       *风扇转速
       * </pre>
       */
      public boolean hasFanSpeed() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 fanSpeed = 425;</code>
       *
       * <pre>
       *风扇转速
       * </pre>
       */
      public int getFanSpeed() {
        return fanSpeed_;
      }
      /**
       * <code>optional int32 fanSpeed = 425;</code>
       *
       * <pre>
       *风扇转速
       * </pre>
       */
      public Builder setFanSpeed(int value) {
        bitField1_ |= 0x00004000;
        fanSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fanSpeed = 425;</code>
       *
       * <pre>
       *风扇转速
       * </pre>
       */
      public Builder clearFanSpeed() {
        bitField1_ = (bitField1_ & ~0x00004000);
        fanSpeed_ = 0;
        onChanged();
        return this;
      }

      // optional int32 mechanicalBoxGear = 430;
      private int mechanicalBoxGear_ ;
      /**
       * <code>optional int32 mechanicalBoxGear = 430;</code>
       *
       * <pre>
       *档位（机械箱）
       * </pre>
       */
      public boolean hasMechanicalBoxGear() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 mechanicalBoxGear = 430;</code>
       *
       * <pre>
       *档位（机械箱）
       * </pre>
       */
      public int getMechanicalBoxGear() {
        return mechanicalBoxGear_;
      }
      /**
       * <code>optional int32 mechanicalBoxGear = 430;</code>
       *
       * <pre>
       *档位（机械箱）
       * </pre>
       */
      public Builder setMechanicalBoxGear(int value) {
        bitField1_ |= 0x00008000;
        mechanicalBoxGear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mechanicalBoxGear = 430;</code>
       *
       * <pre>
       *档位（机械箱）
       * </pre>
       */
      public Builder clearMechanicalBoxGear() {
        bitField1_ = (bitField1_ & ~0x00008000);
        mechanicalBoxGear_ = 0;
        onChanged();
        return this;
      }

      // optional int32 instrumentSpeed = 435;
      private int instrumentSpeed_ ;
      /**
       * <code>optional int32 instrumentSpeed = 435;</code>
       *
       * <pre>
       *仪表车速
       * </pre>
       */
      public boolean hasInstrumentSpeed() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 instrumentSpeed = 435;</code>
       *
       * <pre>
       *仪表车速
       * </pre>
       */
      public int getInstrumentSpeed() {
        return instrumentSpeed_;
      }
      /**
       * <code>optional int32 instrumentSpeed = 435;</code>
       *
       * <pre>
       *仪表车速
       * </pre>
       */
      public Builder setInstrumentSpeed(int value) {
        bitField1_ |= 0x00010000;
        instrumentSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 instrumentSpeed = 435;</code>
       *
       * <pre>
       *仪表车速
       * </pre>
       */
      public Builder clearInstrumentSpeed() {
        bitField1_ = (bitField1_ & ~0x00010000);
        instrumentSpeed_ = 0;
        onChanged();
        return this;
      }

      // optional int32 wheelSpeed = 436;
      private int wheelSpeed_ ;
      /**
       * <code>optional int32 wheelSpeed = 436;</code>
       *
       * <pre>
       *车轮车速
       * </pre>
       */
      public boolean hasWheelSpeed() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 wheelSpeed = 436;</code>
       *
       * <pre>
       *车轮车速
       * </pre>
       */
      public int getWheelSpeed() {
        return wheelSpeed_;
      }
      /**
       * <code>optional int32 wheelSpeed = 436;</code>
       *
       * <pre>
       *车轮车速
       * </pre>
       */
      public Builder setWheelSpeed(int value) {
        bitField1_ |= 0x00020000;
        wheelSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 wheelSpeed = 436;</code>
       *
       * <pre>
       *车轮车速
       * </pre>
       */
      public Builder clearWheelSpeed() {
        bitField1_ = (bitField1_ & ~0x00020000);
        wheelSpeed_ = 0;
        onChanged();
        return this;
      }

      // optional int32 parkingBrakeSwitch = 437;
      private int parkingBrakeSwitch_ ;
      /**
       * <code>optional int32 parkingBrakeSwitch = 437;</code>
       *
       * <pre>
       *驻车制动开关
       * </pre>
       */
      public boolean hasParkingBrakeSwitch() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 parkingBrakeSwitch = 437;</code>
       *
       * <pre>
       *驻车制动开关
       * </pre>
       */
      public int getParkingBrakeSwitch() {
        return parkingBrakeSwitch_;
      }
      /**
       * <code>optional int32 parkingBrakeSwitch = 437;</code>
       *
       * <pre>
       *驻车制动开关
       * </pre>
       */
      public Builder setParkingBrakeSwitch(int value) {
        bitField1_ |= 0x00040000;
        parkingBrakeSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 parkingBrakeSwitch = 437;</code>
       *
       * <pre>
       *驻车制动开关
       * </pre>
       */
      public Builder clearParkingBrakeSwitch() {
        bitField1_ = (bitField1_ & ~0x00040000);
        parkingBrakeSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cruiseControlSettingSwitch = 438;
      private int cruiseControlSettingSwitch_ ;
      /**
       * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
       *
       * <pre>
       *巡航控制设置开关
       * </pre>
       */
      public boolean hasCruiseControlSettingSwitch() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
       *
       * <pre>
       *巡航控制设置开关
       * </pre>
       */
      public int getCruiseControlSettingSwitch() {
        return cruiseControlSettingSwitch_;
      }
      /**
       * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
       *
       * <pre>
       *巡航控制设置开关
       * </pre>
       */
      public Builder setCruiseControlSettingSwitch(int value) {
        bitField1_ |= 0x00080000;
        cruiseControlSettingSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cruiseControlSettingSwitch = 438;</code>
       *
       * <pre>
       *巡航控制设置开关
       * </pre>
       */
      public Builder clearCruiseControlSettingSwitch() {
        bitField1_ = (bitField1_ & ~0x00080000);
        cruiseControlSettingSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional int32 targetGear = 439;
      private int targetGear_ ;
      /**
       * <code>optional int32 targetGear = 439;</code>
       *
       * <pre>
       *目标档位
       * </pre>
       */
      public boolean hasTargetGear() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 targetGear = 439;</code>
       *
       * <pre>
       *目标档位
       * </pre>
       */
      public int getTargetGear() {
        return targetGear_;
      }
      /**
       * <code>optional int32 targetGear = 439;</code>
       *
       * <pre>
       *目标档位
       * </pre>
       */
      public Builder setTargetGear(int value) {
        bitField1_ |= 0x00100000;
        targetGear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 targetGear = 439;</code>
       *
       * <pre>
       *目标档位
       * </pre>
       */
      public Builder clearTargetGear() {
        bitField1_ = (bitField1_ & ~0x00100000);
        targetGear_ = 0;
        onChanged();
        return this;
      }

      // optional int32 slope = 440;
      private int slope_ ;
      /**
       * <code>optional int32 slope = 440;</code>
       *
       * <pre>
       *坡度
       * </pre>
       */
      public boolean hasSlope() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 slope = 440;</code>
       *
       * <pre>
       *坡度
       * </pre>
       */
      public int getSlope() {
        return slope_;
      }
      /**
       * <code>optional int32 slope = 440;</code>
       *
       * <pre>
       *坡度
       * </pre>
       */
      public Builder setSlope(int value) {
        bitField1_ |= 0x00200000;
        slope_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 slope = 440;</code>
       *
       * <pre>
       *坡度
       * </pre>
       */
      public Builder clearSlope() {
        bitField1_ = (bitField1_ & ~0x00200000);
        slope_ = 0;
        onChanged();
        return this;
      }

      // optional int32 load = 441;
      private int load_ ;
      /**
       * <code>optional int32 load = 441;</code>
       *
       * <pre>
       *载重
       * </pre>
       */
      public boolean hasLoad() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 load = 441;</code>
       *
       * <pre>
       *载重
       * </pre>
       */
      public int getLoad() {
        return load_;
      }
      /**
       * <code>optional int32 load = 441;</code>
       *
       * <pre>
       *载重
       * </pre>
       */
      public Builder setLoad(int value) {
        bitField1_ |= 0x00400000;
        load_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 load = 441;</code>
       *
       * <pre>
       *载重
       * </pre>
       */
      public Builder clearLoad() {
        bitField1_ = (bitField1_ & ~0x00400000);
        load_ = 0;
        onChanged();
        return this;
      }

      // optional int32 fuelLevel = 442;
      private int fuelLevel_ ;
      /**
       * <code>optional int32 fuelLevel = 442;</code>
       *
       * <pre>
       *燃油液位
       * </pre>
       */
      public boolean hasFuelLevel() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 fuelLevel = 442;</code>
       *
       * <pre>
       *燃油液位
       * </pre>
       */
      public int getFuelLevel() {
        return fuelLevel_;
      }
      /**
       * <code>optional int32 fuelLevel = 442;</code>
       *
       * <pre>
       *燃油液位
       * </pre>
       */
      public Builder setFuelLevel(int value) {
        bitField1_ |= 0x00800000;
        fuelLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fuelLevel = 442;</code>
       *
       * <pre>
       *燃油液位
       * </pre>
       */
      public Builder clearFuelLevel() {
        bitField1_ = (bitField1_ & ~0x00800000);
        fuelLevel_ = 0;
        onChanged();
        return this;
      }

      // optional int32 waterTemperature = 443;
      private int waterTemperature_ ;
      /**
       * <code>optional int32 waterTemperature = 443;</code>
       *
       * <pre>
       *水温
       * </pre>
       */
      public boolean hasWaterTemperature() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 waterTemperature = 443;</code>
       *
       * <pre>
       *水温
       * </pre>
       */
      public int getWaterTemperature() {
        return waterTemperature_;
      }
      /**
       * <code>optional int32 waterTemperature = 443;</code>
       *
       * <pre>
       *水温
       * </pre>
       */
      public Builder setWaterTemperature(int value) {
        bitField1_ |= 0x01000000;
        waterTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 waterTemperature = 443;</code>
       *
       * <pre>
       *水温
       * </pre>
       */
      public Builder clearWaterTemperature() {
        bitField1_ = (bitField1_ & ~0x01000000);
        waterTemperature_ = 0;
        onChanged();
        return this;
      }

      // optional int32 atmosphericPressure = 444;
      private int atmosphericPressure_ ;
      /**
       * <code>optional int32 atmosphericPressure = 444;</code>
       *
       * <pre>
       *大气压力
       * </pre>
       */
      public boolean hasAtmosphericPressure() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 atmosphericPressure = 444;</code>
       *
       * <pre>
       *大气压力
       * </pre>
       */
      public int getAtmosphericPressure() {
        return atmosphericPressure_;
      }
      /**
       * <code>optional int32 atmosphericPressure = 444;</code>
       *
       * <pre>
       *大气压力
       * </pre>
       */
      public Builder setAtmosphericPressure(int value) {
        bitField1_ |= 0x02000000;
        atmosphericPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 atmosphericPressure = 444;</code>
       *
       * <pre>
       *大气压力
       * </pre>
       */
      public Builder clearAtmosphericPressure() {
        bitField1_ = (bitField1_ & ~0x02000000);
        atmosphericPressure_ = 0;
        onChanged();
        return this;
      }

      // optional int32 intakeAirTemperature = 445;
      private int intakeAirTemperature_ ;
      /**
       * <code>optional int32 intakeAirTemperature = 445;</code>
       *
       * <pre>
       *进气温度
       * </pre>
       */
      public boolean hasIntakeAirTemperature() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 intakeAirTemperature = 445;</code>
       *
       * <pre>
       *进气温度
       * </pre>
       */
      public int getIntakeAirTemperature() {
        return intakeAirTemperature_;
      }
      /**
       * <code>optional int32 intakeAirTemperature = 445;</code>
       *
       * <pre>
       *进气温度
       * </pre>
       */
      public Builder setIntakeAirTemperature(int value) {
        bitField1_ |= 0x04000000;
        intakeAirTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 intakeAirTemperature = 445;</code>
       *
       * <pre>
       *进气温度
       * </pre>
       */
      public Builder clearIntakeAirTemperature() {
        bitField1_ = (bitField1_ & ~0x04000000);
        intakeAirTemperature_ = 0;
        onChanged();
        return this;
      }

      // optional int32 atmosphericTemperature = 446;
      private int atmosphericTemperature_ ;
      /**
       * <code>optional int32 atmosphericTemperature = 446;</code>
       *
       * <pre>
       *大气温度
       * </pre>
       */
      public boolean hasAtmosphericTemperature() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 atmosphericTemperature = 446;</code>
       *
       * <pre>
       *大气温度
       * </pre>
       */
      public int getAtmosphericTemperature() {
        return atmosphericTemperature_;
      }
      /**
       * <code>optional int32 atmosphericTemperature = 446;</code>
       *
       * <pre>
       *大气温度
       * </pre>
       */
      public Builder setAtmosphericTemperature(int value) {
        bitField1_ |= 0x08000000;
        atmosphericTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 atmosphericTemperature = 446;</code>
       *
       * <pre>
       *大气温度
       * </pre>
       */
      public Builder clearAtmosphericTemperature() {
        bitField1_ = (bitField1_ & ~0x08000000);
        atmosphericTemperature_ = 0;
        onChanged();
        return this;
      }

      // optional int32 exhaustGasTemperature = 447;
      private int exhaustGasTemperature_ ;
      /**
       * <code>optional int32 exhaustGasTemperature = 447;</code>
       *
       * <pre>
       *排气温度
       * </pre>
       */
      public boolean hasExhaustGasTemperature() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 exhaustGasTemperature = 447;</code>
       *
       * <pre>
       *排气温度
       * </pre>
       */
      public int getExhaustGasTemperature() {
        return exhaustGasTemperature_;
      }
      /**
       * <code>optional int32 exhaustGasTemperature = 447;</code>
       *
       * <pre>
       *排气温度
       * </pre>
       */
      public Builder setExhaustGasTemperature(int value) {
        bitField1_ |= 0x10000000;
        exhaustGasTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 exhaustGasTemperature = 447;</code>
       *
       * <pre>
       *排气温度
       * </pre>
       */
      public Builder clearExhaustGasTemperature() {
        bitField1_ = (bitField1_ & ~0x10000000);
        exhaustGasTemperature_ = 0;
        onChanged();
        return this;
      }

      // optional int32 intakeManifoldBoostPressure = 448;
      private int intakeManifoldBoostPressure_ ;
      /**
       * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
       *
       * <pre>
       *进气歧管增压压力
       * </pre>
       */
      public boolean hasIntakeManifoldBoostPressure() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
       *
       * <pre>
       *进气歧管增压压力
       * </pre>
       */
      public int getIntakeManifoldBoostPressure() {
        return intakeManifoldBoostPressure_;
      }
      /**
       * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
       *
       * <pre>
       *进气歧管增压压力
       * </pre>
       */
      public Builder setIntakeManifoldBoostPressure(int value) {
        bitField1_ |= 0x20000000;
        intakeManifoldBoostPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 intakeManifoldBoostPressure = 448;</code>
       *
       * <pre>
       *进气歧管增压压力
       * </pre>
       */
      public Builder clearIntakeManifoldBoostPressure() {
        bitField1_ = (bitField1_ & ~0x20000000);
        intakeManifoldBoostPressure_ = 0;
        onChanged();
        return this;
      }

      // optional int32 relativePressure = 449;
      private int relativePressure_ ;
      /**
       * <code>optional int32 relativePressure = 449;</code>
       *
       * <pre>
       *相对压力
       * </pre>
       */
      public boolean hasRelativePressure() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 relativePressure = 449;</code>
       *
       * <pre>
       *相对压力
       * </pre>
       */
      public int getRelativePressure() {
        return relativePressure_;
      }
      /**
       * <code>optional int32 relativePressure = 449;</code>
       *
       * <pre>
       *相对压力
       * </pre>
       */
      public Builder setRelativePressure(int value) {
        bitField1_ |= 0x40000000;
        relativePressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 relativePressure = 449;</code>
       *
       * <pre>
       *相对压力
       * </pre>
       */
      public Builder clearRelativePressure() {
        bitField1_ = (bitField1_ & ~0x40000000);
        relativePressure_ = 0;
        onChanged();
        return this;
      }

      // optional int32 engineTorqueMode = 450;
      private int engineTorqueMode_ ;
      /**
       * <code>optional int32 engineTorqueMode = 450;</code>
       *
       * <pre>
       *发动机扭矩模式
       * </pre>
       */
      public boolean hasEngineTorqueMode() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 engineTorqueMode = 450;</code>
       *
       * <pre>
       *发动机扭矩模式
       * </pre>
       */
      public int getEngineTorqueMode() {
        return engineTorqueMode_;
      }
      /**
       * <code>optional int32 engineTorqueMode = 450;</code>
       *
       * <pre>
       *发动机扭矩模式
       * </pre>
       */
      public Builder setEngineTorqueMode(int value) {
        bitField1_ |= 0x80000000;
        engineTorqueMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 engineTorqueMode = 450;</code>
       *
       * <pre>
       *发动机扭矩模式
       * </pre>
       */
      public Builder clearEngineTorqueMode() {
        bitField1_ = (bitField1_ & ~0x80000000);
        engineTorqueMode_ = 0;
        onChanged();
        return this;
      }

      // optional int32 oilPressure = 451;
      private int oilPressure_ ;
      /**
       * <code>optional int32 oilPressure = 451;</code>
       *
       * <pre>
       *机油压力
       * </pre>
       */
      public boolean hasOilPressure() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 oilPressure = 451;</code>
       *
       * <pre>
       *机油压力
       * </pre>
       */
      public int getOilPressure() {
        return oilPressure_;
      }
      /**
       * <code>optional int32 oilPressure = 451;</code>
       *
       * <pre>
       *机油压力
       * </pre>
       */
      public Builder setOilPressure(int value) {
        bitField2_ |= 0x00000001;
        oilPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 oilPressure = 451;</code>
       *
       * <pre>
       *机油压力
       * </pre>
       */
      public Builder clearOilPressure() {
        bitField2_ = (bitField2_ & ~0x00000001);
        oilPressure_ = 0;
        onChanged();
        return this;
      }

      // optional int32 ureaLevel = 452;
      private int ureaLevel_ ;
      /**
       * <code>optional int32 ureaLevel = 452;</code>
       *
       * <pre>
       *尿素液位
       * </pre>
       */
      public boolean hasUreaLevel() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 ureaLevel = 452;</code>
       *
       * <pre>
       *尿素液位
       * </pre>
       */
      public int getUreaLevel() {
        return ureaLevel_;
      }
      /**
       * <code>optional int32 ureaLevel = 452;</code>
       *
       * <pre>
       *尿素液位
       * </pre>
       */
      public Builder setUreaLevel(int value) {
        bitField2_ |= 0x00000002;
        ureaLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ureaLevel = 452;</code>
       *
       * <pre>
       *尿素液位
       * </pre>
       */
      public Builder clearUreaLevel() {
        bitField2_ = (bitField2_ & ~0x00000002);
        ureaLevel_ = 0;
        onChanged();
        return this;
      }

      // optional int64 statusFlag = 453;
      private long statusFlag_ ;
      /**
       * <code>optional int64 statusFlag = 453;</code>
       *
       * <pre>
       *状态标志位
       * </pre>
       */
      public boolean hasStatusFlag() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 statusFlag = 453;</code>
       *
       * <pre>
       *状态标志位
       * </pre>
       */
      public long getStatusFlag() {
        return statusFlag_;
      }
      /**
       * <code>optional int64 statusFlag = 453;</code>
       *
       * <pre>
       *状态标志位
       * </pre>
       */
      public Builder setStatusFlag(long value) {
        bitField2_ |= 0x00000004;
        statusFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 statusFlag = 453;</code>
       *
       * <pre>
       *状态标志位
       * </pre>
       */
      public Builder clearStatusFlag() {
        bitField2_ = (bitField2_ & ~0x00000004);
        statusFlag_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 brakeRate = 454;
      private int brakeRate_ ;
      /**
       * <code>optional int32 brakeRate = 454;</code>
       *
       * <pre>
       *制动踏板开度
       * </pre>
       */
      public boolean hasBrakeRate() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 brakeRate = 454;</code>
       *
       * <pre>
       *制动踏板开度
       * </pre>
       */
      public int getBrakeRate() {
        return brakeRate_;
      }
      /**
       * <code>optional int32 brakeRate = 454;</code>
       *
       * <pre>
       *制动踏板开度
       * </pre>
       */
      public Builder setBrakeRate(int value) {
        bitField2_ |= 0x00000008;
        brakeRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 brakeRate = 454;</code>
       *
       * <pre>
       *制动踏板开度
       * </pre>
       */
      public Builder clearBrakeRate() {
        bitField2_ = (bitField2_ & ~0x00000008);
        brakeRate_ = 0;
        onChanged();
        return this;
      }

      // optional int32 gpsDirection = 455;
      private int gpsDirection_ ;
      /**
       * <code>optional int32 gpsDirection = 455;</code>
       *
       * <pre>
       *GSP方向
       * </pre>
       */
      public boolean hasGpsDirection() {
        return ((bitField2_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 gpsDirection = 455;</code>
       *
       * <pre>
       *GSP方向
       * </pre>
       */
      public int getGpsDirection() {
        return gpsDirection_;
      }
      /**
       * <code>optional int32 gpsDirection = 455;</code>
       *
       * <pre>
       *GSP方向
       * </pre>
       */
      public Builder setGpsDirection(int value) {
        bitField2_ |= 0x00000010;
        gpsDirection_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gpsDirection = 455;</code>
       *
       * <pre>
       *GSP方向
       * </pre>
       */
      public Builder clearGpsDirection() {
        bitField2_ = (bitField2_ & ~0x00000010);
        gpsDirection_ = 0;
        onChanged();
        return this;
      }

      // optional int32 airConditionStatus = 456;
      private int airConditionStatus_ ;
      /**
       * <code>optional int32 airConditionStatus = 456;</code>
       *
       * <pre>
       *空调压缩机状态
       * </pre>
       */
      public boolean hasAirConditionStatus() {
        return ((bitField2_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 airConditionStatus = 456;</code>
       *
       * <pre>
       *空调压缩机状态
       * </pre>
       */
      public int getAirConditionStatus() {
        return airConditionStatus_;
      }
      /**
       * <code>optional int32 airConditionStatus = 456;</code>
       *
       * <pre>
       *空调压缩机状态
       * </pre>
       */
      public Builder setAirConditionStatus(int value) {
        bitField2_ |= 0x00000020;
        airConditionStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 airConditionStatus = 456;</code>
       *
       * <pre>
       *空调压缩机状态
       * </pre>
       */
      public Builder clearAirConditionStatus() {
        bitField2_ = (bitField2_ & ~0x00000020);
        airConditionStatus_ = 0;
        onChanged();
        return this;
      }

      // optional int32 transmissionRotation = 457;
      private int transmissionRotation_ ;
      /**
       * <code>optional int32 transmissionRotation = 457;</code>
       *
       * <pre>
       *变速箱转速
       * </pre>
       */
      public boolean hasTransmissionRotation() {
        return ((bitField2_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 transmissionRotation = 457;</code>
       *
       * <pre>
       *变速箱转速
       * </pre>
       */
      public int getTransmissionRotation() {
        return transmissionRotation_;
      }
      /**
       * <code>optional int32 transmissionRotation = 457;</code>
       *
       * <pre>
       *变速箱转速
       * </pre>
       */
      public Builder setTransmissionRotation(int value) {
        bitField2_ |= 0x00000040;
        transmissionRotation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 transmissionRotation = 457;</code>
       *
       * <pre>
       *变速箱转速
       * </pre>
       */
      public Builder clearTransmissionRotation() {
        bitField2_ = (bitField2_ & ~0x00000040);
        transmissionRotation_ = 0;
        onChanged();
        return this;
      }

      // optional string part_time = 5000;
      private Object partTime_ = "";
      /**
       * <code>optional string part_time = 5000;</code>
       *
       * <pre>
       *这里主要给落入hdfs的数据做分区用，加字段请在上面加
       * </pre>
       */
      public boolean hasPartTime() {
        return ((bitField2_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string part_time = 5000;</code>
       *
       * <pre>
       *这里主要给落入hdfs的数据做分区用，加字段请在上面加
       * </pre>
       */
      public String getPartTime() {
        Object ref = partTime_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          partTime_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>optional string part_time = 5000;</code>
       *
       * <pre>
       *这里主要给落入hdfs的数据做分区用，加字段请在上面加
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPartTimeBytes() {
        Object ref = partTime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          partTime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string part_time = 5000;</code>
       *
       * <pre>
       *这里主要给落入hdfs的数据做分区用，加字段请在上面加
       * </pre>
       */
      public Builder setPartTime(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField2_ |= 0x00000080;
        partTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string part_time = 5000;</code>
       *
       * <pre>
       *这里主要给落入hdfs的数据做分区用，加字段请在上面加
       * </pre>
       */
      public Builder clearPartTime() {
        bitField2_ = (bitField2_ & ~0x00000080);
        partTime_ = getDefaultInstance().getPartTime();
        onChanged();
        return this;
      }
      /**
       * <code>optional string part_time = 5000;</code>
       *
       * <pre>
       *这里主要给落入hdfs的数据做分区用，加字段请在上面加
       * </pre>
       */
      public Builder setPartTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField2_ |= 0x00000080;
        partTime_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RealTimeData)
    }

    static {
      defaultInstance = new RealTimeData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RealTimeData)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_RealTimeData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_RealTimeData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\030proto/RealTimeData.proto\"\322\r\n\014RealTimeD" +
      "ata\022\017\n\007gpsTime\030\001 \002(\003\022\020\n\010latitude\030\002 \001(\005\022\021" +
      "\n\tlongitude\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\032\n\022eng" +
      "ineOutputTorque\030\005 \001(\005\022\r\n\005speed\030\006 \001(\005\022\023\n\013" +
      "accelerator\030\007 \001(\005\022\r\n\005brake\030\010 \001(\005\022\020\n\010rota" +
      "tion\030\t \001(\005\022\014\n\004gear\030\n \001(\005\022\024\n\014clutchSwitch" +
      "\030\013 \001(\005\022\036\n\026realTimeOilConsumption\030\014 \001(\005\022\033" +
      "\n\023fuelConsumptionRate\030\r \001(\005\022\035\n\025retransmi" +
      "ssionPackets\030& \001(\005\022\022\n\nterminalId\0302 \001(\003\022\024" +
      "\n\014serialNumber\030d \001(\003\022\023\n\013receiveDate\030n \001(",
      "\003\022\023\n\013originalLat\030x \001(\005\022\024\n\013originalLng\030\202\001" +
      " \001(\005\022\025\n\014protocolType\030\334\001 \001(\005\022\025\n\014vehicleSp" +
      "eed\030\254\002 \001(\005\022\033\n\022barometricPressure\030\255\002 \001(\005\022" +
      "\027\n\016frictionTorque\030\256\002 \001(\005\022#\n\032scrUpStreamN" +
      "OxSensorOutput\030\257\002 \001(\005\022%\n\034scrDownStreamNO" +
      "xSensorOutput\030\260\002 \001(\005\022\031\n\020reagentAllowance" +
      "\030\261\002 \001(\005\022\022\n\tairInflow\030\262\002 \001(\005\022\034\n\023scrInletT" +
      "emperature\030\263\002 \001(\005\022\035\n\024scrOutletTemperatur" +
      "e\030\264\002 \001(\005\022\032\n\021dpfDropoutVoltage\030\265\002 \001(\005\022!\n\030" +
      "engineCoolantTemperature\030\266\002 \001(\005\022\022\n\ttankL",
      "evel\030\267\002 \001(\005\022\031\n\020positioningState\030\270\002 \001(\005\022\020" +
      "\n\007mileage\030\271\002 \001(\003\022\017\n\006rValue\030\272\002 \001(\t\022\017\n\006sVa" +
      "lue\030\273\002 \001(\t\022\024\n\013commandUnit\030\274\002 \001(\005\022\014\n\003vin\030" +
      "\275\002 \001(\t\022\030\n\017terminalVersion\030\276\002 \001(\005\022\023\n\nencr" +
      "yption\030\277\002 \001(\005\022\020\n\007rLength\030\300\002 \001(\005\022\020\n\007sLeng" +
      "th\030\301\002 \001(\005\022\033\n\022engineBrakingState\030\225\003 \001(\005\022\034" +
      "\n\023exhaustBrakingState\030\232\003 \001(\005\022\024\n\013emptySig" +
      "nal\030\237\003 \001(\005\022\024\n\013exhaustFlow\030\244\003 \001(\005\022\021\n\010fanS" +
      "peed\030\251\003 \001(\005\022\032\n\021mechanicalBoxGear\030\256\003 \001(\005\022" +
      "\030\n\017instrumentSpeed\030\263\003 \001(\005\022\023\n\nwheelSpeed\030",
      "\264\003 \001(\005\022\033\n\022parkingBrakeSwitch\030\265\003 \001(\005\022#\n\032c" +
      "ruiseControlSettingSwitch\030\266\003 \001(\005\022\023\n\ntarg" +
      "etGear\030\267\003 \001(\005\022\016\n\005slope\030\270\003 \001(\005\022\r\n\004load\030\271\003" +
      " \001(\005\022\022\n\tfuelLevel\030\272\003 \001(\005\022\031\n\020waterTempera" +
      "ture\030\273\003 \001(\005\022\034\n\023atmosphericPressure\030\274\003 \001(" +
      "\005\022\035\n\024intakeAirTemperature\030\275\003 \001(\005\022\037\n\026atmo" +
      "sphericTemperature\030\276\003 \001(\005\022\036\n\025exhaustGasT" +
      "emperature\030\277\003 \001(\005\022$\n\033intakeManifoldBoost" +
      "Pressure\030\300\003 \001(\005\022\031\n\020relativePressure\030\301\003 \001" +
      "(\005\022\031\n\020engineTorqueMode\030\302\003 \001(\005\022\024\n\013oilPres",
      "sure\030\303\003 \001(\005\022\022\n\tureaLevel\030\304\003 \001(\005\022\023\n\nstatu" +
      "sFlag\030\305\003 \001(\003\022\022\n\tbrakeRate\030\306\003 \001(\005\022\025\n\014gpsD" +
      "irection\030\307\003 \001(\005\022\033\n\022airConditionStatus\030\310\003" +
      " \001(\005\022\035\n\024transmissionRotation\030\311\003 \001(\005\022\022\n\tp" +
      "art_time\030\210\' \001(\tB9\n\'com.navinfo.stream.qi" +
      "ngqi.protocol.javaB\016RealTimeDataPb"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_RealTimeData_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_RealTimeData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_RealTimeData_descriptor,
              new String[] { "GpsTime", "Latitude", "Longitude", "Height", "EngineOutputTorque", "Speed", "Accelerator", "Brake", "Rotation", "Gear", "ClutchSwitch", "RealTimeOilConsumption", "FuelConsumptionRate", "RetransmissionPackets", "TerminalId", "SerialNumber", "ReceiveDate", "OriginalLat", "OriginalLng", "ProtocolType", "VehicleSpeed", "BarometricPressure", "FrictionTorque", "ScrUpStreamNOxSensorOutput", "ScrDownStreamNOxSensorOutput", "ReagentAllowance", "AirInflow", "ScrInletTemperature", "ScrOutletTemperature", "DpfDropoutVoltage", "EngineCoolantTemperature", "TankLevel", "PositioningState", "Mileage", "RValue", "SValue", "CommandUnit", "Vin", "TerminalVersion", "Encryption", "RLength", "SLength", "EngineBrakingState", "ExhaustBrakingState", "EmptySignal", "ExhaustFlow", "FanSpeed", "MechanicalBoxGear", "InstrumentSpeed", "WheelSpeed", "ParkingBrakeSwitch", "CruiseControlSettingSwitch", "TargetGear", "Slope", "Load", "FuelLevel", "WaterTemperature", "AtmosphericPressure", "IntakeAirTemperature", "AtmosphericTemperature", "ExhaustGasTemperature", "IntakeManifoldBoostPressure", "RelativePressure", "EngineTorqueMode", "OilPressure", "UreaLevel", "StatusFlag", "BrakeRate", "GpsDirection", "AirConditionStatus", "TransmissionRotation", "PartTime", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
